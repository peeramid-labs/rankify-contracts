{
  "address": "0xbD846F28E93E36cbe955D4919fE3a387B3672AEC",
  "abi": [
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "NoDivisionReminderAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RankNotSpecified",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "invalidConfiguration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "invalidECDSARecoverSigner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nTurns",
          "type": "uint256"
        }
      ],
      "name": "invalidTurnCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "zeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "gmCommitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "voterPubKey",
          "type": "string"
        }
      ],
      "name": "PlayerJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerLeft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rankId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toMint",
          "type": "uint256"
        }
      ],
      "name": "RankTokenExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "RegistrationOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gm",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        }
      ],
      "name": "gameCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "canEndTurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "canStartGame",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameRank",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPlayerCnt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPlayerCnt",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "nTurns",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "voteCredits",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "gameMaster",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minGameTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "timePerTurn",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "timeToJoin",
              "type": "uint128"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IRankifyInstance.NewGameParamsInput",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "minGameTime",
          "type": "uint128"
        }
      ],
      "name": "estimateGamePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rankId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exitRankToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "gameCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "gameWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numGames",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "contractInitialized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "principalCost",
                  "type": "uint256"
                },
                {
                  "internalType": "uint96",
                  "name": "principalTimeConstant",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "gamePaymentToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "rankTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "minimumParticipantsInCircle",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "derivedToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "proposalIntegrityVerifier",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "poseidon5",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "poseidon6",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "poseidon2",
                  "type": "address"
                }
              ],
              "internalType": "struct LibRankify.CommonParams",
              "name": "commonParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibRankify.InstanceState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getPlayerVotedArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayersGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getPlayersMoved",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getScores",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getTurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "isGameOver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "isLastTurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "isOvertime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "isPlayerTurnComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "isRegistrationOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "gameMasterSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "gmCommitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "voterPubKey",
          "type": "string"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "leaveGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "openRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permutationCommitment",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6d0e33fe23916e171d511b358f483af0aaa7b0fc4e8fd4a4c1a23e30ffb8ab9",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0xbD846F28E93E36cbe955D4919fE3a387B3672AEC",
    "transactionIndex": 1,
    "gasUsed": "5281432",
    "logsBloom": "0x
    "blockHash": "0x46d2260c05c2c207f39c1711cb6b7e82da45a5e390bae3a3dbbbc42dd3aaf57b",
    "transactionHash": "0xe6d0e33fe23916e171d511b358f483af0aaa7b0fc4e8fd4a4c1a23e30ffb8ab9",
    "logs": [],
    "blockNumber": 128682791,
    "cumulativeGasUsed": "5281432",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ea2864ad3cb14f931435061b28b0384",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"NoDivisionReminderAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RankNotSpecified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"invalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"invalidECDSARecoverSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nTurns\",\"type\":\"uint256\"}],\"name\":\"invalidTurnCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"zeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"gmCommitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"voterPubKey\",\"type\":\"string\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rankId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toMint\",\"type\":\"uint256\"}],\"name\":\"RankTokenExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"gameCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"canEndTurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"canStartGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPlayerCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayerCnt\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"nTurns\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"voteCredits\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameMaster\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minGameTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timePerTurn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeToJoin\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IRankifyInstance.NewGameParamsInput\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"minGameTime\",\"type\":\"uint128\"}],\"name\":\"estimateGamePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rankId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitRankToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"gameCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"gameWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numGames\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"contractInitialized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"principalTimeConstant\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"gamePaymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rankTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumParticipantsInCircle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"derivedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposalIntegrityVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poseidon5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poseidon6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poseidon2\",\"type\":\"address\"}],\"internalType\":\"struct LibRankify.CommonParams\",\"name\":\"commonParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibRankify.InstanceState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPlayerVotedArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPlayersMoved\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getScores\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getTurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"isGameOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"isLastTurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"isOvertime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"isPlayerTurnComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"isRegistrationOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"gameMasterSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"gmCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"voterPubKey\",\"type\":\"string\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"leaveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"openRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permutationCommitment\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Peeramid Labs, 2024\",\"details\":\"Implements core game functionality, ERC token receivers, and reentrancy protection\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{\"canEndTurn(uint256)\":{\"details\":\"Returns whether the turn can be ended early for the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether the turn can be ended early\"}},\"canStartGame(uint256)\":{\"details\":\"Returns whether the game with the specified ID can be started early\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether the game can be started early\"}},\"cancelGame(uint256)\":{\"custom:security\":\"nonReentrant\",\"details\":\"Cancels a game with the provided game ID. `gameId` is the ID of the game.\",\"params\":{\"gameId\":\"The ID of the game.\"}},\"createGame((uint256,uint256,uint256,uint96,uint256,address,uint128,uint128,uint128,string))\":{\"custom:security\":\"nonReentrant\",\"details\":\"External function to create a new game\",\"params\":{\"params\":\"Input parameters for creating a new game\"}},\"estimateGamePrice(uint128)\":{\"details\":\"Estimates the price of a game with the specified minimum game time\",\"params\":{\"minGameTime\":\"The minimum game time\"},\"returns\":{\"_0\":\"uint256 The estimated price of the game\"}},\"gameCreator(uint256)\":{\"details\":\"Returns the creator of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"address The creator of the game\"}},\"gameWinner(uint256)\":{\"details\":\"Returns the winner of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"address The winner of the game\"}},\"getContractState()\":{\"details\":\"Returns the current state of the contract\",\"returns\":{\"_0\":\"LibRankify.InstanceState The current state of the contract\"}},\"getGM(uint256)\":{\"details\":\"Returns the game master of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"address The game master of the game\"}},\"getGameRank(uint256)\":{\"details\":\"Returns the rank of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"uint256 The rank of the game\"}},\"getPlayerVotedArray(uint256)\":{\"details\":\"Returns the voted array for the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool[] The voted array\"}},\"getPlayers(uint256)\":{\"details\":\"Returns the players in the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"address[] The players in the game\"}},\"getPlayersGame(address)\":{\"details\":\"Returns the game ID of the game that the specified player is in\",\"params\":{\"player\":\"The address of the player\"},\"returns\":{\"_0\":\"uint256 The ID of the game\"}},\"getPlayersMoved(uint256)\":{\"details\":\"Returns the players who have moved in the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool[] The players who have moved\",\"_1\":\"uint256 The number of players who have moved\"}},\"getScores(uint256)\":{\"details\":\"Returns the scores of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"address[] The players in the game\",\"_1\":\"uint256[] The scores of the players\"}},\"getTurn(uint256)\":{\"details\":\"Returns the current turn of the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"uint256 The current turn of the game\"}},\"isGameOver(uint256)\":{\"details\":\"Returns whether the game with the specified ID is over\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether the game is over\"}},\"isLastTurn(uint256)\":{\"details\":\"Returns whether the game with the specified ID is in the last turn\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether the game is in the last turn\"}},\"isOvertime(uint256)\":{\"details\":\"Returns whether the game with the specified ID is in overtime\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether the game is in overtime\"}},\"isPlayerTurnComplete(uint256,address)\":{\"details\":\"Returns whether the player has completed their turn in the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\",\"player\":\"The address of the player\"},\"returns\":{\"_0\":\"bool Whether the player has completed their turn\"}},\"isRegistrationOpen(uint256)\":{\"details\":\"Returns whether registration is open for the game with the specified ID\",\"params\":{\"gameId\":\"The ID of the game\"},\"returns\":{\"_0\":\"bool Whether registration is open\"}},\"joinGame(uint256,bytes,bytes32,uint256,string)\":{\"custom:security\":\"nonReentrant\",\"details\":\"Allows a player to join a game with the provided game ID. `gameId` is the ID of the game.\",\"params\":{\"deadline\":\"The deadline for the player to sign the gmCommitment.\",\"gameId\":\"The ID of the game.\",\"gameMasterSignature\":\"The ECDSA signature of the game master.\",\"gmCommitment\":\"The gmCommitment to the player signed by the game master.\"}},\"leaveGame(uint256)\":{\"custom:security\":\"nonReentrant\",\"details\":\"Allows a player to leave a game with the provided game ID. `gameId` is the ID of the game.\",\"params\":{\"gameId\":\"The ID of the game.\"}},\"openRegistration(uint256)\":{\"details\":\"Opens registration for a game with the provided game ID. `gameId` is the ID of the game.\",\"params\":{\"gameId\":\"The ID of the game.\"}},\"startGame(uint256,uint256)\":{\"details\":\"Starts a game with the provided game ID early. `gameId` is the ID of the game.\",\"params\":{\"gameId\":\"The ID of the game.\",\"permutationCommitment\":\"The commitment to the permutation issued by the game master.\"}}},\"title\":\"RankifyInstanceMainFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelGame(uint256)\":{\"notice\":\"This function:         - Calls the `enforceIsGameCreator` function with `msg.sender`.         - Cancels the game.         - Emits a _GameClosed_ event.\"},\"createGame((uint256,uint256,uint256,uint96,uint256,address,uint128,uint128,uint128,string))\":{\"notice\":\"This function:         - Validates the contract is initialized         - Processes input parameters         - Creates a new game with specified settings\"},\"joinGame(uint256,bytes,bytes32,uint256,string)\":{\"notice\":\"This function:         - Calls the `joinGame` function with `msg.sender`.         - Calls the `fund` function with `bytes32(gameId)`.         - Emits a _PlayerJoined_ event.\"},\"leaveGame(uint256)\":{\"notice\":\"This function:         - Calls the `quitGame` function with `msg.sender`, `true`, and `onPlayerQuit`.\"},\"openRegistration(uint256)\":{\"notice\":\"This function:         - Calls the `enforceIsGameCreator` function with `msg.sender`.         - Calls the `enforceIsPreRegistrationStage` function.         - Calls the `openRegistration` function.         - Emits a _RegistrationOpen_ event.\"},\"startGame(uint256,uint256)\":{\"notice\":\"This function:         - Calls the `enforceGameExists` function.         - Calls the `startGameEarly` function.         - Emits a _GameStarted_ event.\"}},\"notice\":\"Main facet for the Rankify protocol that handles game creation and management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/RankifyInstanceMainFacet.sol\":\"RankifyInstanceMainFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"@openzeppelin/contracts/interfaces/IERC5805.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../utils/NoncesUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"@openzeppelin/contracts/utils/types/Time.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract VotesUpgradeable is Initializable, ContextUpgradeable, EIP712Upgradeable, NoncesUpgradeable, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Votes\\n    struct VotesStorage {\\n        mapping(address account => address) _delegatee;\\n\\n        mapping(address delegatee => Checkpoints.Trace208) _delegateCheckpoints;\\n\\n        Checkpoints.Trace208 _totalCheckpoints;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Votes\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant VotesStorageLocation = 0xe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00;\\n\\n    function _getVotesStorage() private pure returns (VotesStorage storage $) {\\n        assembly {\\n            $.slot := VotesStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    function __Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\\n     */\\n    function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        return SafeCast.toUint48(timepoint);\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        address oldDelegate = delegates(account);\\n        $._delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from == address(0)) {\\n            _push($._totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push($._totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return SafeCast.toUint32($._delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe031deb896a4cf2dbfad99a6d3c926b5000953033a4da11aa74a69c29c1724b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c54228bbb2f1f8616179c51bdb90b7960f4a3414c390ad5c6ead6763eb55a59\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {VotesUpgradeable} from \\\"../../../governance/utils/VotesUpgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20Upgradeable, VotesUpgradeable {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\",\"keccak256\":\"0xd29cb0592b4aadc1ba10795eff133e7459d5d54fdca3972c1d55ff26cfa49f34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\\n    struct NoncesStorage {\\n        mapping(address account => uint256) _nonces;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Nonces\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\\n\\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\\n        assembly {\\n            $.slot := NoncesStorageLocation\\n        }\\n    }\\n\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        return $._nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return $._nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a618cd9a1eea21201ec2ed8484080ca6225215e8883723bef34b9dcf22aa3b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"../../interfaces/IERC5805.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Nonces} from \\\"../../utils/Nonces.sol\\\";\\nimport {EIP712} from \\\"../../utils/cryptography/EIP712.sol\\\";\\nimport {Checkpoints} from \\\"../../utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"../../utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract Votes is Context, EIP712, Nonces, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address account => address) private _delegatee;\\n\\n    mapping(address delegatee => Checkpoints.Trace208) private _delegateCheckpoints;\\n\\n    Checkpoints.Trace208 private _totalCheckpoints;\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\\n     */\\n    function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        return SafeCast.toUint48(timepoint);\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        return _delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        return _delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        return _totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        return _totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        address oldDelegate = delegates(account);\\n        _delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        if (from == address(0)) {\\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    _delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    _delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x3f91c79d6f55db9e4fc36e1cfe6a483a7b0f5be60fecbd979555071673746d47\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x1528f3ef49ef2750b428564df007feb2d5c7a792bf79c6d125409c96322a4c00\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4aaaf1c0737dd16e81f0d2b9833c549747a5ede6873bf1444bc72aa572d03e98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"./utils/ERC1155Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22933f0f4897ff70a991c3baebfbc2574fd052dc4bae7fcafec45b07c1f23dd3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x68d6fdbeb467192c3627a46aa7bf5cbb73267363b740abc511f521a5a41a446e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155} from \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xdfab949ba677f4b122d0c14225e6db7ca8a65524e2f00049e57b04f68eceeb87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35d120c427299af1525aaf07955314d9e36a62f14408eb93dec71a2e001f74d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30afe9013aaeb3ba735284a9310792776f57a3b2db6fc1d99628f2c47287f5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Total supply cap has been exceeded.\\n     */\\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\\n\\n    /**\\n     * @dev The supplied cap is not a valid cap.\\n     */\\n    error ERC20InvalidCap(uint256 cap);\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        if (cap_ == 0) {\\n            revert ERC20InvalidCap(0);\\n        }\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_update}.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n\\n        if (from == address(0)) {\\n            uint256 maxSupply = cap();\\n            uint256 supply = totalSupply();\\n            if (supply > maxSupply) {\\n                revert ERC20ExceededCap(supply, maxSupply);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a961321311c070327b31fba89d821346225a411f946c9e84b330afdfdbb1d60\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Votes} from \\\"../../../governance/utils/Votes.sol\\\";\\nimport {Checkpoints} from \\\"../../../utils/structs/Checkpoints.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20Votes is ERC20, Votes {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\",\"keccak256\":\"0x62dc9346044aabf22d78541bd495aa6ca05a7f5100aed26196ba35d40b59fcb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdee1ff07172e443c6600581fc4f11e7830a6d33e4e551752935b835d52a09404\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9586854de33dc9d3a7160cad8170fdfb4119d02a44bad90ba16d71d701cc92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\" // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        if (signer.code.length == 0) {\\n            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);\\n            return err == ECDSA.RecoverError.NoError && recovered == signer;\\n        } else {\\n            return isValidERC1271SignatureNow(signer, hash, signature);\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC-1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224 oldValue, uint224 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224 oldValue, uint224 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint224 storage last = _unsafeAccess(self, pos - 1);\\n            uint32 lastKey = last._key;\\n            uint224 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace208 storage self,\\n        uint48 key,\\n        uint208 value\\n    ) internal returns (uint208 oldValue, uint208 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint208 value\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint208 storage last = _unsafeAccess(self, pos - 1);\\n            uint48 lastKey = last._key;\\n            uint208 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160 oldValue, uint160 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160 oldValue, uint160 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint160 storage last = _unsafeAccess(self, pos - 1);\\n            uint96 lastKey = last._key;\\n            uint160 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66364cd3247ea71cdb58f080f5d5ed6732433a8001413139661841535494692f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(\\n        Delay self,\\n        uint48 timepoint\\n    ) private pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        (valueBefore, valueAfter, effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../libraries/LibMiddleware.sol\\\";\\n\\n/**\\n * @title ERC7746Middleware\\n * @notice Abstract contract that serves as a middleware for ERC7746 standard.\\n * This contract is intended to be inherited by other contracts that implement\\n * the ERC7746 functionality. It provides base functionality and structure\\n * that can be extended and customized by derived contracts.\\n * @author Peeramid Labs, 2024\\n */\\nabstract contract ERC7746Middleware {\\n    /**\\n     * @notice Modifier to apply custom logic for ERC7746 compliance.\\n     * @param _selector The function selector to be checked.\\n     * @param sender The address of the sender.\\n     * @param data The calldata being passed to the function.\\n     * @param value The value being transferred.\\n     */\\n    modifier ERC7746C(bytes4 _selector, address sender, bytes calldata data, uint256 value) {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(_selector, sender, data, value);\\n        _;\\n        LibMiddleware.afterCall(_selector, sender, data, value, layerReturns);\\n    }\\n\\n    /**\\n     * @notice Modifier to apply ERC7746 specific logic.\\n     * This modifier can be used to enforce certain conditions or\\n     * execute specific code before or after the function it modifies.\\n     */\\n    modifier ERC7746() {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(msg.sig, msg.sender, msg.data, msg.value);\\n        _;\\n        LibMiddleware.afterCall(msg.sig, msg.sender, msg.data, msg.value, layerReturns);\\n    }\\n}\\n\",\"keccak256\":\"0xb63c6fa5bdaeeee6cc0a1c014ec941dcd0d995b6a0e857d788c6b121d92fb6c5\",\"license\":\"Apache-2.0\"},\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC7746 Interface\\n * @dev Interface for the ERC7746 standard.\\n */\\ninterface IERC7746 {\\n    /// @notice Validates a function call before execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function beforeCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @notice Validates a function call after execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function afterCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eb8e8f14581dff37cc01475b0eb63926998b958328aa23e8afe3c0e2c93024a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\nlibrary LibMiddleware {\\n    bytes32 private constant ACCESS_LAYERS_STORAGE_POSITION = keccak256(\\\"lib.access.layer.storage\\\");\\n\\n    struct LayerStruct {\\n        address layerAddess;\\n        bytes layerConfigData;\\n    }\\n\\n    function accessLayersStorage() internal pure returns (LayerStruct[] storage ls) {\\n        bytes32 position = ACCESS_LAYERS_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function setLayer(address layerAddress, uint256 layerIndex, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls[layerIndex].layerAddess = layerAddress;\\n        ls[layerIndex].layerConfigData = layerConfigData;\\n    }\\n\\n    function addLayer(LayerStruct memory newLayer) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.push(newLayer);\\n    }\\n\\n    function setLayers(LayerStruct[] memory newLayers) internal {\\n        uint256 length = newLayers.length;\\n        for (uint256 i; i < length; ++i) {\\n            addLayer(newLayers[i]);\\n        }\\n    }\\n\\n    function addLayer(address layerAddress, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        LayerStruct memory newLayer = LayerStruct({layerAddess: layerAddress, layerConfigData: layerConfigData});\\n        ls.push(newLayer);\\n    }\\n\\n    function popLayer() internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.pop();\\n    }\\n\\n    function getLayer(uint256 layerIdx) internal view returns (LayerStruct storage) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        return ls[layerIdx];\\n    }\\n\\n    function beforeCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value\\n    ) internal returns (bytes[] memory) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        bytes[] memory layerReturns = new bytes[](length);\\n        for (uint256 i; i < length; ++i) {\\n            layerReturns[i] = validateLayerBeforeCall(ls[i], _selector, sender, data, value);\\n        }\\n        return layerReturns;\\n    }\\n\\n    function validateLayerBeforeCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        bytes memory retval = IERC7746(layer.layerAddess).beforeCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data\\n        );\\n\\n        return retval;\\n    }\\n\\n    function afterCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes[] memory beforeCallReturns\\n    ) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        for (uint256 i; i < length; ++i) {\\n            validateLayerAfterCall(ls[length - 1 - i], _selector, sender, data, value, beforeCallReturns[i]);\\n        }\\n    }\\n\\n    function extractRevertReason(bytes memory revertData) internal pure returns (string memory reason) {\\n        uint256 l = revertData.length;\\n        if (l < 68) return \\\"\\\";\\n        uint256 t;\\n        assembly {\\n            revertData := add(revertData, 4)\\n            t := mload(revertData) // Save the content of the length slot\\n            mstore(revertData, sub(l, 4)) // Set proper length\\n        }\\n        reason = abi.decode(revertData, (string));\\n        assembly {\\n            mstore(revertData, t) // Restore the content of the length slot\\n        }\\n    }\\n\\n    function validateLayerAfterCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes memory beforeCallReturnValue\\n    ) internal {\\n        IERC7746(layer.layerAddess).afterCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data,\\n            beforeCallReturnValue\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1dab29dcf57b1596d1ea89302fd143e46ff6b42edf8b58bf81b0c76eb08a4bfe\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"},\"src/abstracts/DiamondReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Author: @Peersky https://github.com/peersky\\n * Adapted this diamond reentrancy guard from:\\n\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n */\\n\\npragma solidity ^0.8.20;\\nimport \\\"../libraries/LibReentrancyGuard.sol\\\";\\n\\nabstract contract DiamondReentrancyGuard {\\n    modifier nonReentrant() {\\n        LibReentrancyGuard.ReentrancyGuardStruct storage rgs = LibReentrancyGuard.reentrancyGuardStorage();\\n        require(!rgs._entered, \\\"REG: You shall not pass!\\\");\\n        rgs._entered = true;\\n        _;\\n        rgs._entered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xfe1f8e71dc63f898ba9ae59193b975352955e0f8c1a694a78cab07df3389cd91\",\"license\":\"Apache-2.0\"},\"src/abstracts/draft-EIP712Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport \\\"../libraries/LibEIP712Storage.sol\\\";\\nimport \\\"../modifiers/OnlyOwnerDiamond.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 is OnlyOwnerDiamond {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        LibEIP712WithStorage.LibEIP712WithStorageStorage storage ss = LibEIP712WithStorage.EIP712WithStorage();\\n        if (address(this) == ss._CACHED_THIS && block.chainid == ss._CACHED_CHAIN_ID) {\\n            return ss._CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(ss._TYPE_HASH, ss._HASHED_NAME, ss._HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x127b859f8989a2eaaa446254219f98eb3049f66027b280ace44394c34e895aa6\",\"license\":\"MIT\"},\"src/facets/RankifyInstanceMainFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {IRankifyInstance} from \\\"../interfaces/IRankifyInstance.sol\\\";\\n\\nimport {IERC1155Receiver} from \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../abstracts/DiamondReentrancyGuard.sol\\\";\\nimport {LibRankify} from \\\"../libraries/LibRankify.sol\\\";\\nimport {LibCoinVending} from \\\"../libraries/LibCoinVending.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../abstracts/draft-EIP712Diamond.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport {DistributableGovernanceERC20} from \\\"../tokens/DistributableGovernanceERC20.sol\\\";\\n/**\\n * @title RankifyInstanceMainFacet\\n * @notice Main facet for the Rankify protocol that handles game creation and management\\n * @dev Implements core game functionality, ERC token receivers, and reentrancy protection\\n * @author Peeramid Labs, 2024\\n */\\ncontract RankifyInstanceMainFacet is\\n    IRankifyInstance,\\n    IERC1155Receiver,\\n    DiamondReentrancyGuard,\\n    IERC721Receiver,\\n    EIP712,\\n    IErrors\\n{\\n    using LibTBG for LibTBG.Instance;\\n    using LibTBG for uint256;\\n    using LibTBG for LibTBG.Settings;\\n    using LibRankify for uint256;\\n\\n    /**\\n     * @dev Internal function to create a new game with the specified parameters\\n     * @param params Struct containing all necessary parameters for game creation\\n     * @notice This function handles the core game creation logic, including:\\n     *         - Setting up the game state\\n     *         - Configuring the coin vending system\\n     *         - Emitting the game creation event\\n     */\\n    function createGame(LibRankify.NewGameParams memory params) private nonReentrant {\\n        //TODO: add this back in start  game to verify commitment from game master\\n        //  bytes32 digest = _hashTypedDataV4(\\n        //     keccak256(\\n        //         abi.encode(\\n        //             keccak256(\\n        //                 \\\"AttestGameCreation(uint256 gameId,uint256 commitment)\\\"\\n        //             ),\\n        //             params.gameId,\\n        //             params.gmCommitment\\n        //         )\\n        //     )\\n        // );\\n\\n        LibRankify.newGame(params);\\n        LibCoinVending.ConfigPosition memory emptyConfig;\\n        LibCoinVending.configure(bytes32(params.gameId), emptyConfig);\\n        emit gameCreated(params.gameId, params.gameMaster, msg.sender, params.gameRank);\\n    }\\n\\n    /**\\n     * @dev External function to create a new game\\n     * @param params Input parameters for creating a new game\\n     * @notice This function:\\n     *         - Validates the contract is initialized\\n     *         - Processes input parameters\\n     *         - Creates a new game with specified settings\\n     * @custom:security nonReentrant\\n     */\\n    function createGame(IRankifyInstance.NewGameParamsInput memory params) public {\\n        LibRankify.enforceIsInitialized();\\n        LibRankify.InstanceState storage settings = LibRankify.instanceState();\\n        LibRankify.NewGameParams memory newGameParams = LibRankify.NewGameParams({\\n            gameId: settings.numGames + 1,\\n            gameRank: params.gameRank,\\n            creator: msg.sender,\\n            minPlayerCnt: params.minPlayerCnt,\\n            maxPlayerCnt: params.maxPlayerCnt,\\n            gameMaster: params.gameMaster,\\n            nTurns: params.nTurns,\\n            voteCredits: params.voteCredits,\\n            minGameTime: params.minGameTime,\\n            timePerTurn: params.timePerTurn,\\n            timeToJoin: params.timeToJoin,\\n            metadata: params.metadata\\n        });\\n\\n        createGame(newGameParams);\\n    }\\n\\n    /**\\n     * @dev Handles a player quitting a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     * @param gameId The ID of the game.\\n     * @param player The address of the player.\\n     * @notice This function:\\n     *         - Refunds the coins for `player` in the game with `gameId`.\\n     *         - Emits a _PlayerLeft_ event.\\n     */\\n    function onPlayerQuit(uint256 gameId, address player) private {\\n        LibCoinVending.refund(bytes32(gameId), player);\\n        emit PlayerLeft(gameId, player);\\n    }\\n\\n    /**\\n     * @dev Cancels a game with the provided game ID. `gameId` is the ID of the game.\\n     * @param gameId The ID of the game.\\n     * @notice This function:\\n     *         - Calls the `enforceIsGameCreator` function with `msg.sender`.\\n     *         - Cancels the game.\\n     *         - Emits a _GameClosed_ event.\\n     * @custom:security nonReentrant\\n     */\\n    function cancelGame(uint256 gameId) public nonReentrant {\\n        gameId.enforceIsGameCreator(msg.sender);\\n        gameId.cancelGame(onPlayerQuit);\\n        emit GameClosed(gameId);\\n    }\\n\\n    /**\\n     * @dev Allows a player to leave a game with the provided game ID. `gameId` is the ID of the game.\\n     * @param gameId The ID of the game.\\n     * @notice This function:\\n     *         - Calls the `quitGame` function with `msg.sender`, `true`, and `onPlayerQuit`.\\n     * @custom:security nonReentrant\\n     */\\n    function leaveGame(uint256 gameId) public nonReentrant {\\n        gameId.quitGame(msg.sender, onPlayerQuit);\\n    }\\n\\n    /**\\n     * @dev Opens registration for a game with the provided game ID. `gameId` is the ID of the game.\\n     * @param gameId The ID of the game.\\n     * @notice This function:\\n     *         - Calls the `enforceIsGameCreator` function with `msg.sender`.\\n     *         - Calls the `enforceIsPreRegistrationStage` function.\\n     *         - Calls the `openRegistration` function.\\n     *         - Emits a _RegistrationOpen_ event.\\n     */\\n    function openRegistration(uint256 gameId) public {\\n        gameId.enforceGameExists();\\n        gameId.enforceIsGameCreator(msg.sender);\\n        gameId.enforceIsPreRegistrationStage();\\n        gameId.openRegistration();\\n        emit RegistrationOpen(gameId);\\n    }\\n\\n    /**\\n     * @dev Allows a player to join a game with the provided game ID. `gameId` is the ID of the game.\\n     * @param gameId The ID of the game.\\n     * @param gameMasterSignature The ECDSA signature of the game master.\\n     * @param gmCommitment The gmCommitment to the player signed by the game master.\\n     * @param deadline The deadline for the player to sign the gmCommitment.\\n     * @notice This function:\\n     *         - Calls the `joinGame` function with `msg.sender`.\\n     *         - Calls the `fund` function with `bytes32(gameId)`.\\n     *         - Emits a _PlayerJoined_ event.\\n     * @custom:security nonReentrant\\n     */\\n    function joinGame(\\n        uint256 gameId,\\n        bytes memory gameMasterSignature,\\n        bytes32 gmCommitment,\\n        uint256 deadline,\\n        string memory voterPubKey\\n    ) public payable nonReentrant {\\n        require(block.timestamp < deadline, \\\"Signature deadline has passed\\\");\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"AttestJoiningGame(address participant,uint256 gameId,bytes32 gmCommitment,uint256 deadline,bytes32 participantPubKeyHash)\\\"\\n                    ),\\n                    msg.sender,\\n                    gameId,\\n                    gmCommitment,\\n                    deadline,\\n                    keccak256(abi.encodePacked(voterPubKey))\\n                )\\n            )\\n        );\\n        gameId.joinGame(msg.sender, gameMasterSignature, digest);\\n        LibCoinVending.fund(bytes32(gameId));\\n        emit PlayerJoined(gameId, msg.sender, gmCommitment, voterPubKey);\\n    }\\n\\n    /**\\n     * @dev Starts a game with the provided game ID early. `gameId` is the ID of the game.\\n     * @param gameId The ID of the game.\\n     * @param permutationCommitment The commitment to the permutation issued by the game master.\\n     * @notice This function:\\n     *         - Calls the `enforceGameExists` function.\\n     *         - Calls the `startGameEarly` function.\\n     *         - Emits a _GameStarted_ event.\\n     */\\n    function startGame(uint256 gameId, uint256 permutationCommitment) public {\\n        gameId.enforceGameExists();\\n        gameId.startGameEarly();\\n        LibRankify.GameState storage game = gameId.getGameState();\\n        game.permutationCommitment = permutationCommitment;\\n        emit GameStarted(gameId);\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) public view override returns (bytes4) {\\n        LibRankify.enforceIsInitialized();\\n        if (operator == address(this)) {\\n            return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n        }\\n        return bytes4(\\\"\\\");\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        LibRankify.enforceIsInitialized();\\n        if (operator == address(this)) {\\n            return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n        }\\n        return bytes4(\\\"\\\");\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        LibRankify.enforceIsInitialized();\\n        if (operator == address(this)) {\\n            return IERC721Receiver.onERC721Received.selector;\\n        }\\n        return bytes4(\\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the current state of the contract\\n     * @return LibRankify.InstanceState The current state of the contract\\n     */\\n    function getContractState() public pure returns (LibRankify.InstanceState memory) {\\n        LibRankify.InstanceState memory state = LibRankify.instanceState();\\n        return state;\\n    }\\n\\n    /**\\n     * @dev Returns the current turn of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return uint256 The current turn of the game\\n     */\\n    function getTurn(uint256 gameId) public view returns (uint256) {\\n        return gameId.getTurn();\\n    }\\n\\n    /**\\n     * @dev Returns the game master of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return address The game master of the game\\n     */\\n    function getGM(uint256 gameId) public view returns (address) {\\n        return gameId.getGM();\\n    }\\n\\n    /**\\n     * @dev Returns the scores of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return address[] The players in the game\\n     * @return uint256[] The scores of the players\\n     */\\n    function getScores(uint256 gameId) public view returns (address[] memory, uint256[] memory) {\\n        return gameId.getScores();\\n    }\\n\\n    /**\\n     * @dev Returns whether the game with the specified ID is in overtime\\n     * @param gameId The ID of the game\\n     * @return bool Whether the game is in overtime\\n     */\\n    function isOvertime(uint256 gameId) public view returns (bool) {\\n        return gameId.isOvertime();\\n    }\\n\\n    /**\\n     * @dev Returns whether the game with the specified ID is over\\n     * @param gameId The ID of the game\\n     * @return bool Whether the game is over\\n     */\\n    function isGameOver(uint256 gameId) public view returns (bool) {\\n        return gameId.isGameOver();\\n    }\\n\\n    /**\\n     * @dev Returns the game ID of the game that the specified player is in\\n     * @param player The address of the player\\n     * @return uint256 The ID of the game\\n     */\\n    function getPlayersGame(address player) public view returns (uint256) {\\n        return LibTBG.getPlayersGame(player);\\n    }\\n\\n    /**\\n     * @dev Returns whether the game with the specified ID is in the last turn\\n     * @param gameId The ID of the game\\n     * @return bool Whether the game is in the last turn\\n     */\\n    function isLastTurn(uint256 gameId) public view returns (bool) {\\n        return gameId.isLastTurn();\\n    }\\n\\n    /**\\n     * @dev Returns whether registration is open for the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return bool Whether registration is open\\n     */\\n    function isRegistrationOpen(uint256 gameId) public view returns (bool) {\\n        return gameId.isRegistrationOpen();\\n    }\\n\\n    /**\\n     * @dev Returns the creator of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return address The creator of the game\\n     */\\n    function gameCreator(uint256 gameId) public view returns (address) {\\n        return gameId.getGameState().createdBy;\\n    }\\n\\n    /**\\n     * @dev Returns the rank of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return uint256 The rank of the game\\n     */\\n    function getGameRank(uint256 gameId) public view returns (uint256) {\\n        return gameId.getGameState().rank;\\n    }\\n\\n    /**\\n     * @dev Estimates the price of a game with the specified minimum game time\\n     * @param minGameTime The minimum game time\\n     * @return uint256 The estimated price of the game\\n     */\\n    function estimateGamePrice(uint128 minGameTime) public pure returns (uint256) {\\n        LibRankify.InstanceState memory state = LibRankify.instanceState();\\n        return LibRankify.getGamePrice(minGameTime, state.commonParams);\\n    }\\n\\n    /**\\n     * @dev Returns the players in the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return address[] The players in the game\\n     */\\n    function getPlayers(uint256 gameId) public view returns (address[] memory) {\\n        return gameId.getPlayers();\\n    }\\n\\n    /**\\n     * @dev Returns whether the game with the specified ID can be started early\\n     * @param gameId The ID of the game\\n     * @return bool Whether the game can be started early\\n     */\\n    function canStartGame(uint256 gameId) public view returns (bool) {\\n        return gameId.canStartEarly();\\n    }\\n\\n    /**\\n     * @dev Returns whether the turn can be ended early for the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return bool Whether the turn can be ended early\\n     */\\n    function canEndTurn(uint256 gameId) public view returns (bool) {\\n        return gameId.canEndTurnEarly();\\n    }\\n\\n    /**\\n     * @dev Returns whether the player has completed their turn in the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @param player The address of the player\\n     * @return bool Whether the player has completed their turn\\n     */\\n    function isPlayerTurnComplete(uint256 gameId, address player) public view returns (bool) {\\n        return gameId.isPlayerTurnComplete(player);\\n    }\\n\\n    /**\\n     * @dev Returns the voted array for the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return bool[] The voted array\\n     */\\n    function getPlayerVotedArray(uint256 gameId) public view returns (bool[] memory) {\\n        LibRankify.GameState storage game = gameId.getGameState();\\n        address[] memory players = gameId.getPlayers();\\n        bool[] memory playerVoted = new bool[](players.length);\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            playerVoted[i] = game.playerVoted[players[i]];\\n        }\\n        return playerVoted;\\n    }\\n\\n    /**\\n     * @dev Returns the players who have moved in the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return bool[] The players who have moved\\n     * @return uint256 The number of players who have moved\\n     */\\n    function getPlayersMoved(uint256 gameId) public view returns (bool[] memory, uint256) {\\n        LibTBG.State storage game = gameId._getState();\\n        address[] memory players = gameId.getPlayers();\\n        bool[] memory playersMoved = new bool[](players.length);\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            playersMoved[i] = game.madeMove[players[i]];\\n        }\\n        return (playersMoved, game.numPlayersMadeMove);\\n    }\\n\\n    function isActive(uint256 gameId, address player) public view returns (bool) {\\n        return gameId.isActive(player);\\n    }\\n\\n    function exitRankToken(uint256 rankId, uint256 amount) external {\\n        require(amount != 0, \\\"cannot specify zero exit amount\\\");\\n        LibRankify.InstanceState storage state = LibRankify.instanceState();\\n        LibRankify.CommonParams storage commons = state.commonParams;\\n        IRankToken rankContract = IRankToken(commons.rankTokenAddress);\\n        DistributableGovernanceERC20 tokenContract = DistributableGovernanceERC20(commons.derivedToken);\\n        uint256 _toMint = amount * (commons.principalCost * (commons.minimumParticipantsInCircle ** rankId));\\n        rankContract.burn(msg.sender, rankId, amount);\\n        tokenContract.mint(msg.sender, _toMint);\\n        emit RankTokenExited(msg.sender, rankId, amount, _toMint);\\n    }\\n\\n    /**\\n     * @dev Returns the winner of the game with the specified ID\\n     * @param gameId The ID of the game\\n     * @return address The winner of the game\\n     */\\n    function gameWinner(uint256 gameId) public view returns (address) {\\n        return gameId.getGameState().winner;\\n    }\\n}\\n\",\"keccak256\":\"0x2fe3f76d1939b34bb47d3c75e83fda1d7a9d1978fe9835442fc1017e9d177795\",\"license\":\"MIT\"},\"src/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa27ad77bced0575dc3a3e4eb8f334a4889f16e5cae2053272676ff69ca9379e2\",\"license\":\"MIT\"},\"src/interfaces/IErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IErrors {\\n    error invalidConfiguration(string message);\\n    error zeroValue();\\n    error invalidECDSARecoverSigner(bytes32 digest, string message);\\n}\\n\",\"keccak256\":\"0x0abffb341345913bdd56bd486d95e38e713b13d71ededa3595841639fe217d73\",\"license\":\"MIT\"},\"src/interfaces/ILockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/**\\n * @title ILockableERC1155\\n * @dev Interface for a lockable ERC1155 token contract.\\n */\\ninterface ILockableERC1155 is IERC1155 {\\n    error insufficient(uint256 id, uint256 balance, uint256 required);\\n\\n    event TokensLocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    event TokensUnlocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    /**\\n     * @dev Locks a specified amount of tokens for a given account and token ID. `account` is the address of the account to lock the tokens for. `id` is the ID of the token to lock. `amount` is the amount of tokens to lock.\\n     *\\n     * emits a _TokensLocked_ event.\\n     */\\n    function lock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Unlocks a specified amount of tokens for a given account and token ID. `account` is the address of the account to unlock the tokens for. `id` is the ID of the token to unlock. `amount` is the amount of tokens to unlock.\\n     *\\n     * emits a _TokensUnlocked_ event.\\n     */\\n    function unlock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the unlocked balance of tokens for a given account and token ID. `account` is the address of the account to check the unlocked balance for. `id` is the ID of the token to check the unlocked balance for.\\n     *\\n     * Returns:\\n     *\\n     * - The unlocked balance of tokens.\\n     */\\n    function unlockedBalanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3bb17ebca15e79a703e18ef72460ea5c9e463f127b2f28d3936c3c751529c439\",\"license\":\"MIT\"},\"src/interfaces/IRankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ILockableERC1155} from \\\"./ILockableERC1155.sol\\\";\\n\\ninterface IRankToken is ILockableERC1155 {\\n    event RankingInstanceUpdated(address indexed newRankingInstance);\\n\\n    // event LevelUp(address indexed account, uint256 id);\\n\\n    /**\\n     * @dev Mints a specified amount of tokens to an account. `to` is the address of the account to mint the tokens to. `amount` is the amount of tokens to mint. `poolId` is the ID of the pool. `data` is the additional data.\\n     */\\n    function mint(address to, uint256 amount, uint256 poolId, bytes memory data) external;\\n\\n    /**\\n     * @dev Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data.\\n     */\\n    function batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    // /**\\n    //  * @dev Updates the ranking instance. `newRankingInstance` is the address of the new ranking instance.\\n    //  *\\n    //  * emits a _RankingInstanceUpdated_ event.\\n    //  */\\n    // function updateRankingInstance(address newRankingInstance) external;\\n\\n    /**\\n     * @dev Gets the ranking instance which can emit new rank updates and mint rank tokens.\\n     *\\n     * Returns:\\n     *\\n     * - The address of the ranking instance.\\n     */\\n    // function getRankingInstance() external view returns (address);\\n\\n    // /**\\n    //  * @dev Finds the new rank of an account. `account` is the address of the account. `oldRank` is the old rank of the account.\\n    //  * It checks the balance of the account and returns the new rank that can be upgraded to.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The new rank of the account.\\n    //  */\\n    // function findNewRank(address account, uint256 oldRank) external view returns (uint256);\\n\\n    // /**\\n    //  * @dev Gets the rank of an account. `account` is the address of the account.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The rank of the account.\\n    //  */\\n    // function getAccountRank(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb21a5ffaf22d264802b6615c579e41eff9a331a48b085acedfd935f97733c5c7\",\"license\":\"MIT\"},\"src/interfaces/IRankifyInstance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {LibQuadraticVoting} from \\\"../libraries/LibQuadraticVoting.sol\\\";\\n\\ninterface IRankifyInstance {\\n    error NoDivisionReminderAllowed(uint256 a, uint256 b);\\n    error invalidTurnCount(uint256 nTurns);\\n    error RankNotSpecified();\\n\\n    event RegistrationOpen(uint256 indexed gameId);\\n    event PlayerJoined(uint256 indexed gameId, address indexed participant, bytes32 gmCommitment, string voterPubKey);\\n    event GameStarted(uint256 indexed gameId);\\n    event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 indexed rank);\\n    event GameClosed(uint256 indexed gameId);\\n    event PlayerLeft(uint256 indexed gameId, address indexed player);\\n    event RankTokenExited(address indexed player, uint256 rankId, uint256 amount, uint256 _toMint);\\n\\n    struct NewGameParamsInput {\\n        uint256 gameRank;\\n        uint256 minPlayerCnt;\\n        uint256 maxPlayerCnt;\\n        uint96 nTurns;\\n        uint256 voteCredits;\\n        address gameMaster;\\n        uint128 minGameTime;\\n        uint128 timePerTurn;\\n        uint128 timeToJoin;\\n        string metadata;\\n    }\\n\\n    struct GameStateOutput {\\n        uint256 rank;\\n        uint256 minGameTime;\\n        address createdBy;\\n        uint256 numOngoingProposals;\\n        uint256 numPrevProposals;\\n        uint256 numCommitments;\\n        uint256 numVotesThisTurn;\\n        uint256 numVotesPrevTurn;\\n        LibQuadraticVoting.qVotingStruct voting;\\n        uint256 currentTurn;\\n        uint256 turnStartedAt;\\n        uint256 registrationOpenAt;\\n        uint256 startedAt;\\n        bool hasStarted;\\n        bool hasEnded;\\n        uint256 numPlayersMadeMove;\\n        uint256 numActivePlayers;\\n        bool isOvertime;\\n        uint256 timePerTurn;\\n        uint256 maxPlayerCnt;\\n        uint256 minPlayerCnt;\\n        uint256 timeToJoin;\\n        uint256 maxTurns;\\n        uint256 voteCredits;\\n        address gameMaster;\\n        string metadata;\\n    }\\n}\\n\",\"keccak256\":\"0xa761f089e8cb71be6d0a0893fbdde726e280158fbd43d0aa32f6a04aa9a0150b\",\"license\":\"MIT\"},\"src/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibArray {\\n    /**\\n     * @dev Sorts the elements of the array in ascending order using the quicksort algorithm.\\n     *\\n     * Requirements:\\n     *\\n     * - The array to be sorted must not be empty.\\n     * - The starting and ending indices must be within the bounds of the array.\\n     *\\n     * Modifies:\\n     *\\n     * - The array is sorted in ascending order.\\n     *\\n     * Note:\\n     *\\n     * - This function uses the in-place quicksort algorithm, which has an average-case complexity of O(n log n) and a worst-case complexity of O(n^2).\\n     */\\n    function quickSort(uint256[] memory arr, int256 left, int256 right) internal view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] > pivot) ++i;\\n            while (pivot > arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                ++i;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x5afcd379801f32d7bc5e740b2b06a644454f1c347d65d8142d8543ff67197e95\",\"license\":\"MIT\"},\"src/libraries/LibCoinVending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Tim Pechersky <@Peersky>\\n\\npragma solidity ^0.8.20;\\n\\nimport {MockERC20} from \\\"../mocks/MockERC20.sol\\\";\\nimport {ERC1155Burnable} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\n/**\\n * @dev This library is used to simulate the vending machine coin acceptor state machine that:\\n *  - Supports large number of positions; Each represents requirements to access different goods of the virtual vending machine.\\n *  - Accepts multiple assets of following types: Native (Eth), ERC20, ERC721, and ERC1155 tokens that can be stacked together.\\n *  - Allows for each individual asset action promise can be one of following:\\n *      - Lock: The asset is locked in the acceptor with promise that asset will be returned to the sender at release funds time.\\n *      - Bet: The asset is locked in the acceptor with promise that asset will be awarded to beneficiary at release funds time.\\n *      - Pay: The asset is locked in the acceptor with promise that asset will be paid to payee at release funds time.\\n *      - Burn: The asset is locked in the acceptor with promise that asset will be destroyed at release funds time.\\n *  - Maintains each position balance, hence allowing multiple participants to line up for the same position.\\n *  - Allows three actions:\\n *      - Fund position with assets\\n *      - Refund assets to user\\n *      - Consume assets and provide goods to user\\n *      - Consuming asset might take a form of\\n *      - Transferring assets to payee\\n *      - Burning assets\\n *      - Awarding beneficiary with assets\\n *      - Returning locked assets back to sender\\n *\\n * This library DOES enforces that any position can only be refunded or processed only within amount funded boundaries\\n * This library DOES NOT store the addresses of senders, nor beneficiaries, nor payees.\\n * This is to be stored within implementation contract.\\n *\\n *\\n *  !!!!! IMPORTANT !!!!!\\n * This library does NOT invocates reentrancy guards. It is implementation contract's responsibility to enforce reentrancy guards.\\n * Reentrancy guards MUST be implemented in an implementing contract.\\n *\\n *  Usage:\\n *\\n *  0. Configure position via configure(...)\\n *  1. fund position with assets via fund(...)\\n *  2. release or refund assets via release(...) or refund(...)\\n *  3. repeat steps 1 and 2 as needed.\\n *  Position can be reconfigured at any time when it's effective balance is zero: `timesFunded - timesRefund - timesReleased = 0`\\n *\\n *\\n * Test state:\\n * This library most functionality has been tested: see ../tests/LibCoinVending.ts and ../tests/report.md for details.\\n *\\n * ERC721 token is checked only for \\\"HAVE\\\" condition since putting requirements on non fungible token id yet to be resolved.\\n * (see ERC721 section in the code below)\\n *\\n * This library has not been yet audited\\n *\\n */\\nlibrary LibCoinVending {\\n    struct Condition {\\n        mapping(ContractTypes => mapping(address => mapping(uint256 => ContractCondition))) contracts;\\n        NumericCondition ethValues;\\n        uint256 timesRefunded;\\n        uint256 timesReleased;\\n        uint256 timesFunded;\\n        ContractTypes[] contractTypes;\\n        address[] contractAddresses;\\n        uint256[] contractIds;\\n        bool _isConfigured;\\n    }\\n    enum RequirementTypes {\\n        HAVE,\\n        LOCK,\\n        BURN,\\n        BET,\\n        PAY\\n    }\\n\\n    struct TransactionProperties {\\n        bytes data;\\n        uint256 amount;\\n    }\\n    struct ContractCondition {\\n        TransactionProperties have;\\n        TransactionProperties lock;\\n        TransactionProperties burn;\\n        TransactionProperties pay;\\n        TransactionProperties bet;\\n    }\\n\\n    struct NumericCondition {\\n        uint256 have;\\n        uint256 lock;\\n        uint256 burn;\\n        uint256 pay;\\n        uint256 bet;\\n    }\\n\\n    enum TransferTypes {\\n        FUND,\\n        REFUND,\\n        RELEASE\\n    }\\n\\n    struct ConditionReturn {\\n        NumericCondition ethValues;\\n        uint256 timesRefunded;\\n        uint256 timesReleased;\\n        uint256 timesFunded;\\n        address[] contractAddresses;\\n        uint256[] contractIds;\\n        ContractTypes[] contractTypes;\\n        bool _isConfigured;\\n    }\\n\\n    struct configSmartRequirement {\\n        address contractAddress;\\n        uint256 contractId;\\n        ContractTypes contractType;\\n        ContractCondition contractRequirement;\\n    }\\n\\n    struct ConfigPosition {\\n        NumericCondition ethValues;\\n        configSmartRequirement[] contracts;\\n    }\\n\\n    struct LibCoinVendingStorage {\\n        mapping(bytes32 => Condition) positions;\\n        address beneficiary;\\n    }\\n\\n    enum ContractTypes {\\n        ERC20,\\n        ERC1155,\\n        ERC721\\n    }\\n\\n    bytes32 constant COIN_VENDING_STORAGE_POSITION = keccak256(\\\"coin.vending.storage.position\\\");\\n\\n    function coinVendingPosition(bytes32 position) internal view returns (Condition storage) {\\n        return coinVendingStorage().positions[keccak256(abi.encode(position))];\\n    }\\n\\n    function coinVendingStorage() internal pure returns (LibCoinVendingStorage storage es) {\\n        bytes32 position = COIN_VENDING_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a specified amount of tokens from one address to another, or burns them if the destination address is zero.\\n     *\\n     * Requirements:\\n     *\\n     * - The `value` must be non-zero.\\n     * - The `from` address must have a sufficient token balance.\\n     * - If the `from` address is not this contract, it must have approved this contract to transfer tokens on its behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - The token balances of the `from` and `to` addresses, or the total supply of tokens if `to` is the zero address.\\n     */\\n    function transferFromAny(address erc20Addr, address from, address to, uint256 value) private {\\n        MockERC20 token = MockERC20(erc20Addr);\\n        if (value != 0) {\\n            if (from == address(this)) {\\n                if (to != address(0)) {\\n                    token.transfer(to, value);\\n                } else {\\n                    token.burn(value);\\n                }\\n            } else {\\n                if (to != address(0)) {\\n                    token.transferFrom(from, to, value);\\n                } else {\\n                    token.transferFrom(from, address(this), value);\\n                    token.burn(value);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fulfills the ERC20 token transfer according to the specified rules.\\n     *\\n     * Requirements:\\n     *\\n     * - The `from` address must have a sufficient token balance.\\n     * - If the `from` address is not this contract, it must have approved this contract to transfer tokens on its behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - The token balances of the `from` and `to` addresses.\\n     */\\n    function fulfillERC20(\\n        address erc20Addr,\\n        ContractCondition storage tokenReq,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        transferFromAny(erc20Addr, from, lockAddress, tokenReq.lock.amount);\\n        transferFromAny(erc20Addr, from, burnAddress, tokenReq.burn.amount);\\n        transferFromAny(erc20Addr, from, payee, tokenReq.pay.amount);\\n        transferFromAny(erc20Addr, from, beneficiary, tokenReq.bet.amount);\\n        MockERC20 token = MockERC20(erc20Addr);\\n        uint256 value = tokenReq.have.amount;\\n        if (value != 0 && from != address(this)) {\\n            require(token.balanceOf(from) >= value, \\\"Not enough erc20 tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Fulfills the ERC721 token transfer according to the specified rules.\\n     *\\n     * Requirements:\\n     *\\n     * - The `from` address must own the token.\\n     * - If the `from` address is not this contract, it must have approved this contract to transfer the token on its behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - The token ownership from the `from` address to the `to` address.\\n     *\\n     * Notes:\\n     *\\n     * Due to non fungible nature it's an open question how to implement this method correctly for lock/burn/pay/bet cases.\\n     * In this library I assume that requirements are for multiple members, hence it makes no sense to put requirement on particular tokenId for ERC721.\\n     * I think best approach would be to split in to two methods:\\n     *  1. fulfillERC72Balance: Treats tokens as fungible - requires one to lock/burn/pay/bet ANY token id, but in total should be equal to desired value.\\n     *  2. fulfillERC721Ids: Requires one to lock/burn/pay/bet specific token id. (useful when requirements are unique per applicant).\\n     * fulfillERC72Balance is easy. fulfillERC721Ids brings up a question of how to select those ID's(since must specify for ERC721 contract on transfer method).\\n     *  Two possible solutions:\\n     *  1: modify fund() method to accept array of address+id pairs of NFT's and parse trough it. computationally inefficient.\\n     *  2: implement onERC721Received such that there is NFT vault in the contract, later fill funding position from that vault. That way applicant could pre-send NFT's to the contract and calling fund later would pull those out from the vault.\\n\\n     */\\n    function fulfillERC72Balance(address erc721addr, ContractCondition storage tokenReq, address from) private view {\\n        ERC721 token = ERC721(erc721addr);\\n\\n        require(\\n            tokenReq.lock.amount == 0 &&\\n                tokenReq.burn.amount == 0 &&\\n                tokenReq.pay.amount == 0 &&\\n                tokenReq.bet.amount == 0,\\n            \\\"ERC721 transfers not supported\\\"\\n        );\\n        if (tokenReq.have.amount != 0 && from != address(this)) {\\n            uint256 balance = token.balanceOf(from);\\n            require(balance >= tokenReq.have.amount, \\\"Not enough ERC721 balance\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Fulfills the ERC1155 token transfer according to the specified rules.\\n     *\\n     * Requirements:\\n     *\\n     * - The `from` address must own the token.\\n     * - If the `from` address is not this contract, it must have approved this contract to transfer the token on its behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - The token ownership from the `from` address to the `to` address.\\n     */\\n    function fulfillERC1155(\\n        address erc1155addr,\\n        uint256 id,\\n        ContractCondition storage tokenReq,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        ERC1155Burnable token = ERC1155Burnable(erc1155addr);\\n        uint256 value = tokenReq.have.amount;\\n        if (value != 0) {\\n            uint256 balance = token.balanceOf(from, id);\\n            require(balance >= value, \\\"ERC1155 balance is not valid\\\");\\n        }\\n        value = tokenReq.pay.amount;\\n        if (value != 0) {\\n            token.safeTransferFrom(from, payee, id, value, tokenReq.pay.data);\\n        }\\n        value = tokenReq.bet.amount;\\n        if (value != 0) {\\n            token.safeTransferFrom(from, beneficiary, id, value, tokenReq.bet.data);\\n        }\\n        value = tokenReq.burn.amount;\\n        if (value != 0) {\\n            if (burnAddress == address(0)) {\\n                token.burn(from, id, value);\\n            } else {\\n                token.safeTransferFrom(from, burnAddress, id, value, tokenReq.burn.data);\\n            }\\n        }\\n        value = tokenReq.lock.amount;\\n        if (value != 0) {\\n            token.safeTransferFrom(from, lockAddress, id, value, tokenReq.lock.data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Fulfills the conditions of a position.\\n     *\\n     * Requirements:\\n     *\\n     * - If `from` is not this contract, the sent value must be greater than or equal to the sum of the locked, paid, bet, and burned values.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the specified amounts of Ether to the lock, payee, beneficiary, and burn addresses.\\n     */\\n    function fulfill(\\n        Condition storage position,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        if (from == address(this)) {\\n            if (position.ethValues.lock != 0) {\\n                payable(lockAddress).transfer(position.ethValues.lock);\\n            }\\n            if (position.ethValues.pay != 0) {\\n                payable(payee).transfer(position.ethValues.pay);\\n            }\\n            if (position.ethValues.bet != 0) {\\n                payable(beneficiary).transfer(position.ethValues.bet);\\n            }\\n            if (position.ethValues.burn != 0) {\\n                payable(burnAddress).transfer(position.ethValues.burn);\\n            }\\n        } else {\\n            uint256 VLReq = position.ethValues.lock +\\n                position.ethValues.pay +\\n                position.ethValues.bet +\\n                position.ethValues.burn;\\n            require(msg.value >= VLReq, \\\"msg.value too low\\\");\\n        }\\n        for (uint256 i = 0; i < position.contractAddresses.length; ++i) {\\n            address contractAddress = position.contractAddresses[i];\\n            uint256 id = position.contractIds[i];\\n            ContractTypes contractType = position.contractTypes[i];\\n            ContractCondition storage requirement = position.contracts[contractType][contractAddress][id];\\n            if (contractType == ContractTypes.ERC20) {\\n                fulfillERC20(contractAddress, requirement, from, payee, beneficiary, burnAddress, lockAddress);\\n            } else if (contractType == ContractTypes.ERC721) {\\n                fulfillERC72Balance(\\n                    contractAddress,\\n                    // id,\\n                    requirement,\\n                    from\\n                    // payee,\\n                    // beneficiary,\\n                    // burnAddress,\\n                    // lockAddress\\n                );\\n            } else if (contractType == ContractTypes.ERC1155) {\\n                fulfillERC1155(contractAddress, id, requirement, from, payee, beneficiary, burnAddress, lockAddress);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Refunds the balance of a condition to the specified address.\\n     *\\n     * `reqPos` The storage reference to the condition.\\n     * `to` The address to refund the balance to.\\n     *\\n     * Requirements:\\n     *\\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the remaining balance of the condition to the `to` address.\\n     * - Increments the `timesRefunded` counter for the condition.\\n     */\\n    function _refund(Condition storage reqPos, address to) private {\\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \\\"Not enough balance to refund\\\");\\n        fulfill(reqPos, address(this), to, to, to, to);\\n        reqPos.timesRefunded += 1;\\n    }\\n\\n    /**\\n     * @dev Returns all position requirements back to founder. `position` is the identifier of the condition. `to` is the address to refund the balance to.\\n     *\\n     * Requirements:\\n     *\\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the remaining balance of the condition to the `to` address.\\n     * - Increments the `timesRefunded` counter for the condition.\\n     */\\n    function refund(bytes32 position, address to) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _refund(reqPos, to);\\n    }\\n\\n    /**\\n     * @dev Returns all position requirements back to multiple founders. `position` is the identifier of the condition. `returnAddresses` is an array of addresses to refund the balance to.\\n     *\\n     * Requirements:\\n     *\\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the remaining balance of the condition to each address in `returnAddresses`.\\n     * - Increments the `timesRefunded` counter for the condition for each address in `returnAddresses`.\\n     */\\n    function batchRefund(bytes32 position, address[] memory returnAddresses) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        for (uint256 i = 0; i < returnAddresses.length; ++i) {\\n            _refund(reqPos, returnAddresses[i]);\\n        }\\n    }\\n\\n    function _release(Condition storage reqPos, address payee, address beneficiary, address returnAddress) private {\\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \\\"Not enough balance to release\\\");\\n        fulfill(reqPos, address(this), payee, beneficiary, address(0), returnAddress);\\n        reqPos.timesReleased += 1;\\n    }\\n\\n    /**\\n     * @dev Releases the funds from a coin vending position to the specified addresses. `position` is the identifier of the condition. `payee`, `beneficiary`, and `returnAddress` are the addresses to release the funds to.\\n     *\\n     * Requirements:\\n     *\\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the remaining balance of the condition to the `payee`, `beneficiary`, and `returnAddress`.\\n     * - Increments the `timesReleased` counter for the condition.\\n     */\\n    function release(bytes32 position, address payee, address beneficiary, address returnAddress) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _release(reqPos, payee, beneficiary, returnAddress);\\n    }\\n\\n    /**\\n     * @dev Releases the funds from a coin vending position to multiple return addresses. `position` is the identifier of the condition. `payee`, `beneficiary`, and `returnAddresses` are the addresses to release the funds to.\\n     *\\n     * Requirements:\\n     *\\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the remaining balance of the condition to the `payee`, `beneficiary`, and each address in `returnAddresses`.\\n     * - Increments the `timesReleased` counter for the condition for each address in `returnAddresses`.\\n     */\\n    function batchRelease(\\n        bytes32 position,\\n        address payee,\\n        address beneficiary,\\n        address[] memory returnAddresses\\n    ) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        for (uint256 i = 0; i < returnAddresses.length; ++i) {\\n            {\\n                _release(reqPos, payee, beneficiary, returnAddresses[i]);\\n            }\\n        }\\n    }\\n\\n    function _fund(Condition storage reqPos, address founder) private {\\n        require(reqPos._isConfigured, \\\"Position does not exist\\\");\\n        fulfill(reqPos, founder, address(this), address(this), address(this), address(this));\\n        reqPos.timesFunded += 1;\\n    }\\n\\n    /**\\n     * @dev Funds the position by `msg.sender`. `position` is the identifier of the condition.\\n     *\\n     * Requirements:\\n     *\\n     * - The condition must be configured.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the funds from `msg.sender` to this contract.\\n     * - Increments the `timesFunded` counter for the condition.\\n     */\\n    function fund(bytes32 position) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _fund(reqPos, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Configures the position. `position` is the identifier of the condition. `configuration` is the new configuration for the condition.\\n     *\\n     * Requirements:\\n     *\\n     * - The condition must not have a positive balance.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the configuration of the condition to `configuration`.\\n     */\\n    function configure(bytes32 position, ConfigPosition memory configuration) internal {\\n        Condition storage mustDo = coinVendingPosition(position);\\n        require(\\n            mustDo.timesFunded == 0 || (mustDo.timesFunded == (mustDo.timesRefunded + mustDo.timesReleased)),\\n            \\\"Cannot mutate position with currently positive balance\\\"\\n        );\\n        mustDo.ethValues = configuration.ethValues;\\n        delete mustDo.contractAddresses;\\n        delete mustDo.contractIds;\\n        delete mustDo.contractTypes;\\n        for (uint256 i = 0; i < configuration.contracts.length; ++i) {\\n            mustDo.contractAddresses.push(configuration.contracts[i].contractAddress);\\n            mustDo.contractIds.push(configuration.contracts[i].contractId);\\n            mustDo.contractTypes.push(configuration.contracts[i].contractType);\\n            mustDo.contracts[configuration.contracts[i].contractType][configuration.contracts[i].contractAddress][\\n                configuration.contracts[i].contractId\\n            ] = configuration.contracts[i].contractRequirement;\\n        }\\n        mustDo._isConfigured = true;\\n    }\\n\\n    /**\\n     * @dev Returns the condition associated with the given position. `position` is the identifier of the condition.\\n     *\\n     * Returns:\\n     *\\n     * - The condition associated with `position`.\\n     */\\n    function getPosition(bytes32 position) internal view returns (ConditionReturn memory) {\\n        Condition storage pos = coinVendingPosition(position);\\n        ConditionReturn memory ret;\\n        ret.ethValues = pos.ethValues;\\n        ret.timesFunded = pos.timesFunded;\\n        ret.timesRefunded = pos.timesRefunded;\\n        ret.timesReleased = pos.timesReleased;\\n        ret._isConfigured = pos._isConfigured;\\n        ret.contractAddresses = pos.contractAddresses;\\n        ret.contractIds = pos.contractIds;\\n        ret.contractTypes = pos.contractTypes;\\n        return ret;\\n    }\\n\\n    /**\\n     * @dev Returns the contract condition associated with the given position, contract address, contract ID, and contract type. `position` is the identifier of the condition. `contractAddress` is the address of the contract. `contractId` is the ID of the contract. `contractType` is the type of the contract.\\n     *\\n     * Returns:\\n     *\\n     * - The contract condition associated with `position`, `contractAddress`, `contractId`, and `contractType`.\\n     */\\n    function getPositionByContract(\\n        bytes32 position,\\n        address contractAddress,\\n        uint256 contractId,\\n        ContractTypes contractType\\n    ) internal view returns (ContractCondition memory) {\\n        Condition storage pos = coinVendingPosition(position);\\n        return pos.contracts[contractType][contractAddress][contractId];\\n    }\\n}\\n\",\"keccak256\":\"0x8785852c824a7c666fdaaa7ab8908b1874e804e9230fbbe7427aff2f99fc1482\",\"license\":\"MIT\"},\"src/libraries/LibEIP712Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IDiamondCut} from \\\"../vendor/diamond/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibEIP712WithStorage {\\n    bytes32 constant EIP712_STORAGE_POSITION = keccak256(\\\"EIP.712.STORAGE.POSITION\\\");\\n\\n    struct LibEIP712WithStorageStorage {\\n        bytes32 _CACHED_DOMAIN_SEPARATOR;\\n        uint256 _CACHED_CHAIN_ID;\\n        address _CACHED_THIS;\\n        bytes32 _HASHED_NAME;\\n        bytes32 _HASHED_VERSION;\\n        bytes32 _TYPE_HASH;\\n        string _VERSION; // Added for introspection reasons\\n        string _NAME; // Added for introspection reasons\\n    }\\n\\n    function EIP712WithStorage() internal pure returns (LibEIP712WithStorageStorage storage ds) {\\n        bytes32 position = EIP712_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x27cc882c94d0cd9d3a338d408f9d2e165519c158773fcf4faed28cc62d437fba\",\"license\":\"MIT\"},\"src/libraries/LibQuadraticVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nerror quadraticVotingError(string parameter, uint256 arg, uint256 arg2);\\n\\n/**\\n * @title LibQuadraticVoting\\n * @dev A library for quadratic voting calculations.\\n */\\nlibrary LibQuadraticVoting {\\n    struct qVotingStruct {\\n        uint256 voteCredits;\\n        uint256 maxQuadraticPoints;\\n        uint256 minQuadraticPositions;\\n    }\\n\\n    /**\\n     * @dev Pre-computes the values for quadratic voting. `voteCredits` is the total number of vote credits. `minExpectedVoteItems` is the minimum expected number of vote items.\\n     *\\n     * Returns:\\n     *\\n     * - A `qVotingStruct` containing the precomputed values.\\n     */\\n    function precomputeValues(\\n        uint256 voteCredits,\\n        uint256 minExpectedVoteItems\\n    ) internal pure returns (qVotingStruct memory) {\\n        qVotingStruct memory q;\\n\\n        q.maxQuadraticPoints = Math.sqrt(voteCredits);\\n\\n        // This block finds how many vote positions are needed to distribute all quadratic vote points.\\n        uint256 iterator = 0;\\n        uint256 accumulator = 0;\\n        do {\\n            accumulator += (q.maxQuadraticPoints - iterator) ** 2;\\n            iterator++;\\n        } while (accumulator < voteCredits);\\n        // This enforces requirement that all vote credits can indeed be spent (no leftovers)\\n        if (accumulator != voteCredits) require(false, \\\"quadraticVotingError: voteCredits must be i^2 series\\\"); //revert quadraticVotingError(\\\"voteCredits must be i^2 series\\\", accumulator, voteCredits);\\n        q.minQuadraticPositions = iterator;\\n        // In order to spend all vote credits there must be at least minQuadraticPositions+1 (because proposer is also a player and cannot vote for himself)\\n        if (minExpectedVoteItems <= q.minQuadraticPositions)\\n            require(false, \\\"quadraticVotingError: Minimum Voting positions above min players\\\");\\n        // revert quadraticVotingError(\\n        //     \\\"Minimum Voting positions above min players\\\",\\n        //     q.minQuadraticPositions,\\n        //     minExpectedVoteItems\\n        // );\\n        q.voteCredits = voteCredits;\\n        return q;\\n    }\\n\\n    /**\\n     * @dev Computes the scores for each proposal by voter preference index. `q` is the precomputed quadratic voting values. `VotersVotes` is a 2D array of votes, where each row corresponds to a voter and each column corresponds to a proposal. `isActive` is an array indicating whether each voter has voted.\\n     *\\n     * Returns:\\n     *\\n     * - An array of scores for each proposal.\\n     */\\n    function tallyVotes(\\n        qVotingStruct memory q,\\n        uint256[][] memory tally, // [participant][votedFor]\\n        bool[] memory isActive\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 notVotedGivesEveryone = q.maxQuadraticPoints;\\n        uint256[] memory scores = new uint256[](tally.length);\\n        uint256[] memory creditsUsed = new uint256[](tally.length);\\n\\n        for (uint256 participant = 0; participant < tally.length; participant++) {\\n            //For each proposal\\n            // console.log(\\\"New tally iter\\\");\\n            uint256[] memory votedFor = tally[participant];\\n            for (uint256 candidate = 0; candidate < tally.length; candidate++) {\\n                // For each potential voter\\n                if (!isActive[participant] && isActive[candidate]) {\\n                    // Check if participant wasn't voting\\n                    scores[candidate] += notVotedGivesEveryone; // Gives benefits to everyone but himself\\n                    creditsUsed[participant] = q.voteCredits;\\n                } else {\\n                    //If participant voted\\n                    scores[candidate] += votedFor[candidate];\\n                    creditsUsed[participant] += votedFor[candidate] ** 2;\\n                }\\n            }\\n            require(\\n                creditsUsed[participant] <= q.voteCredits,\\n                quadraticVotingError(\\\"Quadratic: vote credits overrun\\\", q.voteCredits, creditsUsed[participant])\\n            );\\n        }\\n        return scores;\\n    }\\n}\\n\",\"keccak256\":\"0x75ab448876b3cbad2b9f00b539b82270a785fd13b3450a04194ecbc8a7831a0c\",\"license\":\"MIT\"},\"src/libraries/LibRankify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {IRankifyInstance} from \\\"../interfaces/IRankifyInstance.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport \\\"../tokens/Rankify.sol\\\";\\nimport {LibQuadraticVoting} from \\\"./LibQuadraticVoting.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n/**\\n * @title LibRankify\\n * @dev Core library for the Rankify protocol that handles game state management, voting, and player interactions\\n * @author Peeramid Labs, 2024\\n */\\nlibrary LibRankify {\\n    using LibTBG for LibTBG.Instance;\\n    using LibTBG for uint256;\\n    using LibTBG for LibTBG.Settings;\\n    using LibTBG for LibTBG.State;\\n    using LibQuadraticVoting for LibQuadraticVoting.qVotingStruct;\\n\\n    /**\\n     * @dev Main state structure for a Rankify instance\\n     * @param numGames Total number of games created in this instance\\n     * @param contractInitialized Whether the contract has been properly initialized\\n     * @param commonParams Common parameters shared across all games in this instance\\n     */\\n    struct InstanceState {\\n        uint256 numGames;\\n        bool contractInitialized;\\n        CommonParams commonParams;\\n    }\\n\\n    /**\\n     * @dev Common parameters shared across all games in a Rankify instance\\n     * @param principalCost Base cost for creating a game\\n     * @param principalTimeConstant Time constant used for game duration calculations\\n     * @param gamePaymentToken Address of the token used for game payments\\n     * @param rankTokenAddress Address of the rank token contract\\n     * @param beneficiary Address that receives a portion of game fees\\n     * @param minimumParticipantsInCircle Minimum number of participants required to join a game\\n     */\\n    struct CommonParams {\\n        uint256 principalCost;\\n        uint96 principalTimeConstant;\\n        address gamePaymentToken;\\n        address rankTokenAddress;\\n        address beneficiary;\\n        uint256 minimumParticipantsInCircle;\\n        address derivedToken;\\n        address proposalIntegrityVerifier;\\n        address poseidon5;\\n        address poseidon6;\\n        address poseidon2;\\n    }\\n\\n    /**\\n     * @dev Comprehensive state structure for an individual game\\n     * @param rank Required rank level for participation\\n     * @param minGameTime Minimum duration the game must run\\n     * @param createdBy Address of the game creator\\n     * @param numOngoingProposals Number of active proposals\\n     * @param numPrevProposals Number of completed proposals\\n     * @param numCommitments Number of vote commitments received\\n     * @param numVotesThisTurn Vote count in current turn\\n     * @param numVotesPrevTurn Vote count from previous turn\\n     * @param voting Quadratic voting state for this game\\n     */\\n    struct GameState {\\n        uint256 rank;\\n        string metadata;\\n        uint256 minGameTime;\\n        address createdBy;\\n        uint256 numOngoingProposals;\\n        uint256 numPrevProposals;\\n        uint256 numCommitments;\\n        uint256 numVotesThisTurn;\\n        uint256 numVotesPrevTurn;\\n        uint256 permutationCommitment;\\n        LibQuadraticVoting.qVotingStruct voting;\\n        mapping(uint256 => string) ongoingProposals; //Previous Turn Proposals (These are being voted on)\\n        mapping(address => uint256) proposalCommitment;\\n        mapping(address => bytes32) ballotHashes;\\n        mapping(address => bool) playerVoted;\\n        address winner;\\n    }\\n\\n    /**\\n     * @dev Compares two strings for equality. `a` and `b` are the strings to compare.\\n     *\\n     * Returns:\\n     *\\n     * - `true` if the strings are equal, `false` otherwise.\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev Returns the game storage for the given game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The game storage for `gameId`.\\n     */\\n    function getGameState(uint256 gameId) internal view returns (GameState storage game) {\\n        bytes32 position = LibTBG.getGameDataStorage(gameId);\\n        assembly {\\n            game.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Rankify InstanceSettings storage.\\n     *\\n     * Returns:\\n     *\\n     * - The instanceState storage.\\n     */\\n    function instanceState() internal pure returns (InstanceState storage contractState) {\\n        bytes32 position = LibTBG.getDataStorage();\\n        assembly {\\n            contractState.slot := position\\n        }\\n    }\\n\\n    bytes32 internal constant _PROPOSAL_PROOF_TYPEHASH =\\n        keccak256(\\\"signProposalByGM(uint256 gameId,uint256 turn,bytes32 proposalNHash,string encryptedProposal)\\\");\\n    bytes32 internal constant _VOTE_PROOF_TYPEHASH =\\n        keccak256(\\\"signVote(uint256 vote1,uint256 vote2,uint256 vote3,uint256 gameId,uint256 turn,bytes32 salt)\\\");\\n    bytes32 internal constant _VOTE_SUBMIT_PROOF_TYPEHASH =\\n        keccak256(\\\"publicSignVote(uint256 gameId,uint256 turn,bytes32 vote1,bytes32 vote2,bytes32 vote3)\\\");\\n\\n    /**\\n     * @dev Ensures that the contract is initialized.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be initialized.\\n     */\\n    function enforceIsInitialized() internal view {\\n        InstanceState storage settings = instanceState();\\n        require(settings.contractInitialized, \\\"onlyInitialized\\\");\\n    }\\n\\n    /**\\n     * @dev Ensures that the game with the given ID exists. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     */\\n    function enforceGameExists(uint256 gameId) internal view {\\n        enforceIsInitialized();\\n        require(gameId.gameExists(), \\\"game not found\\\");\\n    }\\n\\n    struct NewGameParams {\\n        uint256 gameId;\\n        uint256 gameRank;\\n        address creator;\\n        uint256 minPlayerCnt;\\n        uint256 maxPlayerCnt;\\n        uint256 voteCredits;\\n        address gameMaster;\\n        uint96 nTurns;\\n        uint128 minGameTime;\\n        uint128 timePerTurn;\\n        uint128 timeToJoin;\\n        string metadata;\\n        // ToDo: It must list gameKey for Game master and game master signature, committing to serve the game\\n    }\\n\\n    function getGamePrice(uint128 minGameTime, CommonParams memory commonParams) internal pure returns (uint256) {\\n        return\\n            Math.mulDiv(\\n                uint256(commonParams.principalCost),\\n                uint256(commonParams.principalTimeConstant),\\n                uint256(minGameTime)\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new game with the given parameters. `gameId` is the ID of the new game. `gameMaster` is the address of the game master. `gameRank` is the rank of the game. `creator` is the address of the creator of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must not already exist.\\n     * - `gameRank` must not be 0.\\n     * - If the game price is not 0, the `creator` must have approved this contract to transfer the game price amount of the game payment token on their behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - Creates a new game with `gameId`.\\n     * - Transfers the game price amount of the game payment token from `creator` to this contract.\\n     * - Sets the payments balance of the game to the game price.\\n     * - Sets the creator of the game to `creator`.\\n     * - Increments the number of games.\\n     * - Sets the rank of the game to `gameRank`.\\n     * - Mints new rank tokens.\\n     */\\n    function newGame(NewGameParams memory params) internal {\\n        // address signer = ECDSA.recover(digest, gameMasterSignature);\\n        //TODO: add this back in start game to verify commitment from game master\\n        // require(\\n        //     params.gameMaster == signer,\\n        //     IErrors.invalidECDSARecoverSigner(digest, \\\"LibRankify::newGame->invalid signature\\\")\\n        // );\\n\\n        enforceIsInitialized();\\n        CommonParams storage commonParams = instanceState().commonParams;\\n\\n        require(\\n            commonParams.principalTimeConstant % params.nTurns == 0,\\n            IRankifyInstance.NoDivisionReminderAllowed(commonParams.principalTimeConstant, params.nTurns)\\n        );\\n        require(\\n            commonParams.principalTimeConstant % params.nTurns == 0,\\n            IRankifyInstance.NoDivisionReminderAllowed(commonParams.principalTimeConstant, params.minGameTime)\\n        );\\n        require(\\n            params.minGameTime % params.nTurns == 0,\\n            IRankifyInstance.NoDivisionReminderAllowed(params.nTurns, params.minGameTime)\\n        );\\n        require(params.minGameTime > 0, \\\"LibRankify::newGame->Min game time zero\\\");\\n        require(params.nTurns > 2, IRankifyInstance.invalidTurnCount(params.nTurns));\\n\\n        LibTBG.Settings memory newSettings = LibTBG.Settings({\\n            timePerTurn: params.timePerTurn,\\n            maxPlayerCnt: params.maxPlayerCnt,\\n            minPlayerCnt: params.minPlayerCnt,\\n            timeToJoin: params.timeToJoin,\\n            maxTurns: params.nTurns,\\n            voteCredits: params.voteCredits,\\n            gameMaster: params.gameMaster,\\n            implementationStoragePointer: bytes32(0)\\n        });\\n\\n        InstanceState storage state = instanceState();\\n\\n        params.gameId.createGame(newSettings); // This will enforce game does not exist yet\\n        GameState storage game = getGameState(params.gameId);\\n        game.voting = LibQuadraticVoting.precomputeValues(params.voteCredits, params.maxPlayerCnt);\\n        game.metadata = params.metadata;\\n        require(\\n            SignedMath.abs(int256(uint256(params.minGameTime)) - int256(uint256(commonParams.principalTimeConstant))) <\\n                uint256(commonParams.principalTimeConstant) * 16,\\n            \\\"Min game time out of bounds\\\"\\n        );\\n        require(commonParams.minimumParticipantsInCircle <= params.minPlayerCnt, \\\"Min player count too low\\\");\\n        uint256 principalGamePrice = getGamePrice(params.minGameTime, commonParams);\\n        uint256 burnAmount = Math.mulDiv(principalGamePrice, 9, 10);\\n        uint256 daoAmount = principalGamePrice - burnAmount;\\n        address beneficiary = commonParams.beneficiary;\\n\\n        Rankify(commonParams.gamePaymentToken).burnFrom(params.creator, burnAmount);\\n        Rankify(commonParams.gamePaymentToken).transferFrom(params.creator, beneficiary, daoAmount);\\n\\n        require(params.gameRank != 0, IRankifyInstance.RankNotSpecified());\\n\\n        game.createdBy = params.creator;\\n        state.numGames += 1;\\n        game.rank = params.gameRank;\\n        game.minGameTime = params.minGameTime;\\n\\n        IRankToken rankTokenContract = IRankToken(state.commonParams.rankTokenAddress);\\n        rankTokenContract.mint(address(this), 1, params.gameRank + 1, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Ensures that the candidate is the creator of the game with the given ID. `gameId` is the ID of the game. `candidate` is the address of the candidate.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `candidate` must be the creator of the game.\\n     */\\n    function enforceIsGameCreator(uint256 gameId, address candidate) internal view {\\n        enforceGameExists(gameId);\\n        GameState storage game = getGameState(gameId);\\n        require(game.createdBy == candidate, \\\"Only game creator\\\");\\n    }\\n\\n    /**\\n     * @dev Ensures that the candidate is the game master of the game with the given ID. `gameId` is the ID of the game. `candidate` is the address of the candidate.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `candidate` must be the game master of the game.\\n     */\\n    function enforceIsGM(uint256 gameId, address candidate) internal view {\\n        enforceGameExists(gameId);\\n        require(gameId.getGM() == candidate, \\\"Only game master\\\");\\n    }\\n\\n    /**\\n     * @dev Locks the rank token of the player. `player` is the address of the player. `gameRank` is the rank of the game. `rankTokenAddress` is the address of the rank token contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `RankTokenAddress` must support `IRankToken` interface\\n     *\\n     * Modifies:\\n     *\\n     * - Locks `gameRank` rank of `player` in the rank token contract.\\n     */\\n    function _fulfillRankRq(address player, uint256 gameRank, address rankTokenAddress) private {\\n        IRankToken rankToken = IRankToken(rankTokenAddress);\\n        rankToken.lock(player, gameRank, 1);\\n    }\\n\\n    /**\\n     * @dev Allows a player to join a game. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - If the join game price is not 0, the `player` must have approved this contract to transfer the join game price amount of the game payment token on their behalf.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers the join game price amount of the game payment token from `player` to this contract.\\n     * - Increases the payments balance of the game by the join game price.\\n     * - Adds `player` to the game.\\n     */\\n    function joinGame(uint256 gameId, address player, bytes memory gameMasterSignature, bytes32 digest) internal {\\n        enforceGameExists(gameId);\\n        fulfillRankRq(gameId, player);\\n        gameId.addPlayer(player);\\n        address signer = ECDSA.recover(digest, gameMasterSignature);\\n        require(\\n            gameId.getGM() == signer,\\n            IErrors.invalidECDSARecoverSigner(digest, \\\"LibRankify::joinGame->invalid signature\\\")\\n        );\\n    }\\n\\n    /**\\n     * @dev Closes the game with the given ID and transfers the game's balance to the beneficiary. `gameId` is the ID of the game. `beneficiary` is the address to transfer the game's balance to. `playersGameEndedCallback` is a callback function to call for each player when the game ends.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Emits rank rewards for the game.\\n     * - Removes and unlocks each player from the game.\\n     * - Calls `playersGameEndedCallback` for each player.\\n     * - Transfers the game's balance to `beneficiary`.\\n     *\\n     * Returns:\\n     *\\n     * - The final scores of the game.\\n     */\\n    function closeGame(\\n        uint256 gameId,\\n        function(uint256, address) playersGameEndedCallback\\n    ) internal returns (address[] memory, uint256[] memory) {\\n        enforceGameExists(gameId);\\n\\n        // Get game state and check minimum time\\n        GameState storage game = getGameState(gameId);\\n        LibTBG.State storage tbgState = gameId._getState();\\n        require(\\n            block.timestamp - tbgState.startedAt >= game.minGameTime,\\n            \\\"Game duration less than minimum required time\\\"\\n        );\\n\\n        (, uint256[] memory finalScores) = gameId.getScores();\\n        address[] memory players = gameId.getPlayers();\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            removeAndUnlockPlayer(gameId, players[i]);\\n            playersGameEndedCallback(gameId, players[i]);\\n        }\\n        emitRankRewards(gameId, gameId.getLeaderBoard());\\n        return (players, finalScores);\\n    }\\n\\n    /**\\n     * @dev Allows a player to quit a game. `gameId` is the ID of the game. `player` is the address of the player. `slash` is a boolean indicating whether to slash the player's payment refund. `onPlayerLeftCallback` is a callback function to call when the player leaves.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - If the join game price is not 0, transfers a refund to `player` and decreases the game's payments balance by the refund amount.\\n     * - Removes and unlocks `player` from the game.\\n     * - Calls `onPlayerLeftCallback` for `player`.\\n     */\\n    function quitGame(uint256 gameId, address player, function(uint256, address) onPlayerLeftCallback) internal {\\n        removeAndUnlockPlayer(gameId, player); // this will throw if game has started or doesn't exist\\n        onPlayerLeftCallback(gameId, player);\\n    }\\n\\n    /**\\n     * @dev Cancels the game with the given ID, refunds half of the game's payment to the game creator, and transfers the remaining balance to the beneficiary. `gameId` is the ID of the game. `onPlayerLeftCallback` is a callback function to call for each player when they leave. `beneficiary` is the address to transfer the remaining balance to.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Calls `quitGame` for each player in the game.\\n     * - Transfers half of the game's payment to the game creator.\\n     * - Decreases the game's payments balance by the refund amount.\\n     * - Transfers the remaining balance of the game to `beneficiary`.\\n     * - Deletes the game.\\n     */ function cancelGame(uint256 gameId, function(uint256, address) onPlayerLeftCallback) internal {\\n        // Cancel the game for each player\\n        address[] memory players = gameId.getPlayers();\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            quitGame(gameId, players[i], onPlayerLeftCallback); //this will throw if game has started or doesn't exist\\n        }\\n\\n        // Delete the game\\n        gameId.deleteGame();\\n    }\\n\\n    /**\\n     * @dev Fulfills the rank requirement for a player to join a game. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Modifies:\\n     *\\n     * - Locks the rank token(s) of `player` in the rank token contract.\\n     */\\n    function fulfillRankRq(uint256 gameId, address player) internal {\\n        InstanceState storage instance = instanceState();\\n        GameState storage game = getGameState(gameId);\\n        if (game.rank > 1) {\\n            _fulfillRankRq(player, game.rank, instance.commonParams.rankTokenAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emits rank rewards to the top three addresses in the leaderboard. `gameId` is the ID of the game. `leaderboard` is an array of addresses representing the leaderboard sorted in descending order. `rankTokenAddress` is the address of the rank token contract.\\n     *\\n     * Modifies:\\n     *\\n     * - Transfers rank tokens from this contract to the top three addresses in the leaderboard.\\n     */\\n    function emitRankReward(uint256 gameId, address[] memory leaderboard, address rankTokenAddress) private {\\n        GameState storage game = getGameState(gameId);\\n        IRankToken rankTokenContract = IRankToken(rankTokenAddress);\\n        if (game.rank > 1) {\\n            rankTokenContract.burn(leaderboard[0], game.rank, 1);\\n        }\\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[0], game.rank + 1, 1, \\\"\\\");\\n        game.winner = leaderboard[0];\\n    }\\n\\n    /**\\n     * @dev Emits rank rewards to the top addresses in the leaderboard for each rank in the game. `gameId` is the ID of the game. `leaderboard` is an array of addresses representing the leaderboard.\\n     *\\n     * Modifies:\\n     *\\n     * - Calls `emitRankReward` for the main rank and each additional rank in the game.\\n     */\\n    function emitRankRewards(uint256 gameId, address[] memory leaderboard) internal {\\n        InstanceState storage instance = LibRankify.instanceState();\\n        emitRankReward(gameId, leaderboard, instance.commonParams.rankTokenAddress);\\n    }\\n\\n    /**\\n     * @dev Releases a rank token for a player with a specific game rank. `player` is the address of the player. `gameRank` is the game rank of the player. `rankTokenAddress` is the address of the rank token contract.\\n     *\\n     * Modifies:\\n     *\\n     * - Unlocks one rank token of `gameRank` for `player` in the rank token contract.\\n     */\\n    function _releaseRankToken(address player, uint256 gameRank, address rankTokenAddress) private {\\n        IRankToken rankToken = IRankToken(rankTokenAddress);\\n        rankToken.unlock(player, gameRank, 1);\\n    }\\n\\n    /**\\n     * @dev Removes a player from a game and unlocks their rank tokens. `gameId` is the ID of the game. `player` is the address of the player to be removed.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Removes `player` from the game.\\n     * - If the game rank is greater than 1, unlocks the game rank token for `player` in the rank token contract.\\n     */\\n    function removeAndUnlockPlayer(uint256 gameId, address player) internal {\\n        enforceGameExists(gameId);\\n        gameId.removePlayer(player); //This will throw if game is in the process\\n        InstanceState storage instance = instanceState();\\n        GameState storage game = getGameState(gameId);\\n        if (game.rank > 1) {\\n            _releaseRankToken(player, game.rank, instance.commonParams.rankTokenAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tries to make a move for a player in a game. `gameId` is the ID of the game. `player` is the address of the player.\\n     * The \\\"move\\\" is considered to be a state when player has made all actions he could in the given turn.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - If the player has not voted and a vote is expected, or if the player has not made a proposal and a proposal is expected, does not make a move and returns `false`.\\n     * - Otherwise, makes a move for `player` and returns `true`.\\n     */\\n    function tryPlayerMove(uint256 gameId, address player) internal returns (bool) {\\n        uint256 turn = gameId.getTurn();\\n        GameState storage game = getGameState(gameId);\\n        bool expectVote = true;\\n        bool expectProposal = true;\\n        if (turn == 1) expectVote = false; // Don't expect votes at first turn\\n        // else if (gameId.isLastTurn()) expectProposal = false; // For now easiest solution is to keep collecting proposals as that is less complicated boundary case\\n        if (game.numPrevProposals < game.voting.minQuadraticPositions) expectVote = false; // If there is not enough proposals then round is skipped votes cannot be filled\\n        bool madeMove = true;\\n        if (expectVote && !game.playerVoted[player]) madeMove = false;\\n        if (expectProposal && game.proposalCommitment[player] == 0) madeMove = false;\\n        if (madeMove) gameId.playerMove(player);\\n        return madeMove;\\n    }\\n\\n    /**\\n     * @dev Calculates the scores using a quadratic formula based on the revealed votes and proposer indices. `gameId` is the ID of the game. `votesRevealed` is an array of revealed votes. `proposerIndices` is an array of proposer indices that links proposals to index in getPlayers().\\n     *\\n     * Returns:\\n     *\\n     * - An array of updated scores for each player.\\n     * - An array of scores calculated for the current round.\\n     */\\n    function calculateScores(\\n        uint256 gameId,\\n        uint256[][] memory votesRevealed\\n    ) internal returns (uint256[] memory, uint256[] memory) {\\n        address[] memory players = gameId.getPlayers();\\n        uint256[] memory scores = new uint256[](players.length);\\n        bool[] memory playerVoted = new bool[](players.length);\\n        GameState storage game = getGameState(gameId);\\n        // Convert mapping to array to pass it to libQuadratic\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            playerVoted[i] = gameId._getState().isActive[players[i]];\\n        }\\n        uint256[] memory roundScores = game.voting.tallyVotes(votesRevealed, playerVoted);\\n        for (uint256 playerIdx = 0; playerIdx < players.length; playerIdx++) {\\n            //for each player\\n            if (game.proposalCommitment[players[playerIdx]] != 0) {\\n                //if player proposal exists\\n                scores[playerIdx] = gameId.getScore(players[playerIdx]) + roundScores[playerIdx];\\n                gameId.setScore(players[playerIdx], scores[playerIdx]);\\n            } else {\\n                //Player did not propose\\n                // TODO: implement tests for this\\n                // require(roundScores[playerIdx] == 0, \\\"LibRankify->calculateScores: player got votes without proposing\\\");\\n            }\\n        }\\n        return (scores, roundScores);\\n    }\\n}\\n\",\"keccak256\":\"0x3cba1dac666193b5505f3350e21b7fd6a4af7407193c01d1493758010e2bd8b0\",\"license\":\"MIT\"},\"src/libraries/LibReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary LibReentrancyGuard {\\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\\\"reentrancy.guard.storage.position\\\");\\n\\n    struct ReentrancyGuardStruct {\\n        bool _entered;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStruct storage ds) {\\n        bytes32 position = TBG_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbde0e60adc83cebebc79b45e2518e12bcfd8e774c0aae81f2155897fa48a0e6\",\"license\":\"MIT\"},\"src/libraries/LibTurnBasedGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {LibArray} from \\\"../libraries/LibArray.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\n/**\\n * @title LibTBG\\n * @dev Library for managing turn-based games.\\n * It is designed to be used as a base library for games, and provides the following functionality:\\n * - setting game settings such as time per turn, max players, min players, etc as well as perform score and leaderboard tracking\\n *\\n * Limitations:\\n * - It is assumed there is only one game per player\\n * - It is assumed there is only on game master per game\\n *\\n * ***WARNING*** Some limitations:\\n * - This library is still under development and its interfaces may change.\\n * - getting game data (which has own storage assignment and can be encapsulated from library) however there is no storage slot collision checks in place\\n *\\n */\\nlibrary LibTBG {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Settings {\\n        uint256 timePerTurn;\\n        uint256 maxPlayerCnt;\\n        uint256 minPlayerCnt;\\n        uint256 timeToJoin;\\n        uint256 maxTurns;\\n        uint256 voteCredits;\\n        address gameMaster;\\n        bytes32 implementationStoragePointer;\\n    }\\n\\n    struct State {\\n        uint256 currentTurn;\\n        uint256 turnStartedAt;\\n        uint256 registrationOpenAt;\\n        uint256 startedAt;\\n        bool hasStarted;\\n        bool hasEnded;\\n        EnumerableSet.AddressSet players;\\n        mapping(address => bool) madeMove;\\n        mapping(address => bool) isActive;\\n        uint256 numPlayersMadeMove;\\n        uint256 numActivePlayers;\\n        mapping(address => uint256) score;\\n        bool isOvertime;\\n        address[] leaderboard;\\n    }\\n\\n    struct Instance {\\n        Settings settings;\\n        State state;\\n    }\\n\\n    struct TBGStorageStruct {\\n        mapping(uint256 => Instance) instances;\\n        mapping(address => uint256) playerInGame;\\n        uint256 totalGamesCreated;\\n    }\\n\\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\\\"turn_based_game.storage.position\\\");\\n    bytes32 constant IMPLEMENTATION_STORAGE_POSITION = keccak256(\\\"implementation.turn_based_game.storage.position\\\");\\n\\n    function TBGStorage() internal pure returns (TBGStorageStruct storage es) {\\n        bytes32 position = TBG_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function _getInstance(uint256 gameId) internal view returns (Instance storage) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.instances[gameId];\\n    }\\n\\n    function _getState(uint256 gameId) internal view returns (State storage) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.instances[gameId].state;\\n    }\\n\\n    /**\\n     * @dev Initializes the game with the provided settings. `settings` is the settings for the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `settings.timePerTurn` must not be zero.\\n     * - `settings.maxPlayerCnt` must not be zero.\\n     * - `settings.minPlayerCnt` must be at least 2.\\n     * - `settings.maxTurns` must not be zero.\\n     * - `settings.timeToJoin` must not be zero.\\n     * - `settings.maxPlayerCnt` must not be less than `settings.minPlayerCnt`.\\n     * Modifies:\\n     *\\n     * - Sets the settings of the game to `settings`.\\n     */\\n\\n    function init(uint256 gameId, Settings memory newSettings) private {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        Settings storage settings = tbg.instances[gameId].settings;\\n        require(newSettings.timePerTurn != 0, IErrors.invalidConfiguration(\\\"LibTBG::init->settings.timePerTurn\\\"));\\n        require(newSettings.maxPlayerCnt != 0, IErrors.invalidConfiguration(\\\"LibTBG::init->settings.maxPlayerCnt\\\"));\\n        require(newSettings.minPlayerCnt > 1, IErrors.invalidConfiguration(\\\"LibTBG::init->settings.minPlayerCnt\\\"));\\n        require(newSettings.maxTurns != 0, IErrors.invalidConfiguration(\\\"LibTBG::init->settings.maxTurns\\\"));\\n        require(newSettings.timeToJoin != 0, IErrors.invalidConfiguration(\\\"LibTBG::init->timeToJoin\\\"));\\n        require(\\n            settings.minPlayerCnt < newSettings.maxPlayerCnt,\\n            IErrors.invalidConfiguration(\\\"LibTBG::init->maxPlayerCnt\\\")\\n        );\\n        require(newSettings.gameMaster != address(0), IErrors.invalidConfiguration(\\\"LibTBG::init->gameMaster\\\"));\\n        tbg.instances[gameId].settings = newSettings;\\n    }\\n\\n    /**\\n     * @dev Creates a new game with the provided game ID and game master. `gameId` is the ID of the game. `gm` is the address of the game master.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must not already exist.\\n     * - `gm` must not be the zero address.\\n     * - `gameId` must not be zero.\\n     * - The game master of the game with `gameId` must be the zero address.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game master of the game with `gameId` to `gm`.\\n     * - Increments the total number of games created.\\n     */\\n    function createGame(uint256 gameId, Settings memory settings) internal {\\n        require(!gameExists(gameId), \\\"createGame->Already exists\\\");\\n        require(gameId != 0, \\\"createGame->gameId\\\");\\n        init(gameId, settings);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        tbg.totalGamesCreated += 1;\\n\\n        //totalGamesCreated ensures nonce-like behavior:\\n        //even if game would get deleted and re-created with same name, data storage would be different\\n        tbg.instances[gameId].settings.implementationStoragePointer = keccak256(\\n            abi.encode(gameId, tbg.totalGamesCreated, TBG_STORAGE_POSITION)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deletes a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game master, current turn, hasEnded, hasStarted,\\n     *   implementationStoragePointer, isOvertime, leaderboard, numPlayersMadeMove,\\n     *   players, registrationOpenAt, and turnStartedAt of the game with `gameId`\\n     *   to their initial values.\\n     * - Sets the score and madeMove of each player in the game with `gameId`\\n     *   to their initial values.\\n     */\\n    function deleteGame(uint256 gameId) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        address[] memory players = tbg.instances[gameId].state.players.values();\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            tbg.instances[gameId].state.score[players[i]] = 0;\\n            tbg.instances[gameId].state.madeMove[players[i]] = false;\\n            tbg.instances[gameId].state.isActive[players[i]] = false;\\n        }\\n        delete tbg.instances[gameId].state.currentTurn;\\n        delete tbg.instances[gameId].state.hasEnded;\\n        delete tbg.instances[gameId].state.hasStarted;\\n        delete tbg.instances[gameId].state.isOvertime;\\n        delete tbg.instances[gameId].state.leaderboard;\\n        delete tbg.instances[gameId].state.numPlayersMadeMove;\\n        delete tbg.instances[gameId].state.players;\\n        delete tbg.instances[gameId].state.registrationOpenAt;\\n        delete tbg.instances[gameId].state.turnStartedAt;\\n        delete tbg.instances[gameId].state.numActivePlayers;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can be joined. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can be joined.\\n     */\\n    function canBeJoined(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        if (state.hasStarted || state.registrationOpenAt == 0) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Adds a player to a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `participant` must not already be in a game.\\n     * - The number of players in the game with `gameId` must be less than the maximum number of players.\\n     * - The game with `gameId` must be joinable.\\n     *\\n     * Modifies:\\n     *\\n     * - Adds `participant` to the players of the game with `gameId`.\\n     * - Sets the madeMove of `participant` in the game with `gameId` to false.\\n     * - Sets the game of `participant` to `gameId`.\\n     */\\n    function addPlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        State storage state = tbg.instances[gameId].state;\\n        Settings storage settings = tbg.instances[gameId].settings;\\n        require(gameExists(gameId), \\\"addPlayer->invalid game\\\");\\n\\n        require(tbg.playerInGame[participant] == 0, \\\"addPlayer->Player in game\\\");\\n        require(state.players.length() < settings.maxPlayerCnt, \\\"addPlayer->party full\\\");\\n\\n        require(canBeJoined(gameId), \\\"addPlayer->cant join now\\\");\\n        state.players.add(participant);\\n        state.madeMove[participant] = false;\\n        state.isActive[participant] = false;\\n        tbg.playerInGame[participant] = gameId;\\n    }\\n\\n    /**\\n     * @dev Checks if a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the player is in the game.\\n     */\\n    function isPlayerInGame(uint256 gameId, address player) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.playerInGame[player] == gameId ? true : false;\\n    }\\n\\n    /**\\n     * @dev Removes a player from a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `participant` must be in the game with `gameId`.\\n     * - The game with `gameId` must not have started or must have ended.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game of `participant` to 0.\\n     * - Removes `participant` from the players of the game with `gameId`.\\n     */\\n    function removePlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        State storage state = tbg.instances[gameId].state;\\n        require(gameExists(gameId), \\\"game does not exist\\\");\\n        require(tbg.playerInGame[participant] == gameId, \\\"Not in the game\\\");\\n        require(state.hasStarted == false || state.hasEnded == true, \\\"Cannot leave once started\\\");\\n        tbg.playerInGame[participant] = 0;\\n        state.players.remove(participant);\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn in a game with the provided game ID has timed out. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn has timed out.\\n     */\\n    function isTurnTimedOut(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        State storage state = _getState(gameId);\\n        assert(gameId != 0);\\n        assert(state.hasStarted == true);\\n        if (block.timestamp <= tbg.instances[gameId].settings.timePerTurn + state.turnStartedAt) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID exists. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game exists.\\n     */\\n    function gameExists(uint256 gameId) internal view returns (bool) {\\n        Settings storage settings = getSettings(gameId);\\n        if (settings.gameMaster != address(0)) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     */\\n    function enforceHasStarted(uint256 gameId) internal view {\\n        State storage state = _getState(gameId);\\n        assert(gameId != 0);\\n        require(state.hasStarted, \\\"Game has not yet started\\\");\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     *\\n     */\\n    function canEndTurn(uint256 gameId) internal view returns (bool) {\\n        bool turnTimedOut = isTurnTimedOut(gameId);\\n        State storage state = _getState(gameId);\\n        if (!state.hasStarted || isGameOver(gameId)) return false;\\n        if (turnTimedOut) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn in a game with the provided game ID can end early. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn can end early.\\n     */\\n    function canEndTurnEarly(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        if (!state.hasStarted || isGameOver(gameId)) return false;\\n\\n        uint256 activePlayersNotMoved = 0;\\n        address[] memory players = state.players.values();\\n        for (uint256 i = 0; i < players.length; i++) {\\n            if (state.isActive[players[i]] && !state.madeMove[players[i]]) {\\n                activePlayersNotMoved++;\\n            }\\n        }\\n        return activePlayersNotMoved == 0 || canEndTurn(gameId);\\n    }\\n\\n    /**\\n     * @dev Modifier that requires the current turn in a game with the provided game ID to be able to end. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The current turn in the game with `gameId` must be able to end.\\n     */\\n    modifier onlyInTurnTime(uint256 gameId) {\\n        require(isTurnTimedOut(gameId) == false, \\\"onlyInTurnTime -> turn timeout\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenTurnCanEnd(uint256 gameId) {\\n        require(canEndTurn(gameId) == true, \\\"onlyWhenTurnCanEnd: Not everyone made a move yet and there still is time\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Resets the states of the players in a game. `State` is the state.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the madeMove and score of each player in `game` to their initial values.\\n     */\\n    function _resetPlayerStates(State storage state) internal {\\n        for (uint256 i = 0; i < state.players.length(); ++i) {\\n            address player = state.players.at(i);\\n            state.madeMove[player] = false;\\n            state.score[player] = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player. `value` is the score.\\n     *\\n     * Requirements:\\n     *\\n     * - `player` must be in the game with `gameId`.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the score of `player` in the game with `gameId` to `value`.\\n     */\\n    function setScore(uint256 gameId, address player, uint256 value) internal {\\n        State storage state = _getState(gameId);\\n        require(isPlayerInGame(gameId, player), \\\"player not in a game\\\");\\n        state.score[player] = value;\\n    }\\n\\n    /**\\n     * @dev Gets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - The score of `player` in the game with `gameId`.\\n     */\\n    function getScore(uint256 gameId, address player) internal view returns (uint256) {\\n        State storage state = _getState(gameId);\\n        return state.score[player];\\n    }\\n\\n    /**\\n     * @dev Gets the scores of the players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`.\\n     * - An array of the scores of the players in the game with `gameId`.\\n     */\\n    function getScores(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\\n        address[] memory players = getPlayers(gameId);\\n        uint256[] memory scores = new uint256[](players.length);\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            scores[i] = getScore(gameId, players[i]);\\n        }\\n        return (players, scores);\\n    }\\n\\n    /**\\n     * @dev Opens registration for a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the registrationOpenAt of the game with `gameId` to the current block timestamp.\\n     */\\n    function openRegistration(uint256 gameId) internal {\\n        require(gameExists(gameId), \\\"game not found\\\");\\n        State storage state = _getState(gameId);\\n        state.registrationOpenAt = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Checks if registration is open for a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether registration is open for the game.\\n     */\\n    function isRegistrationOpen(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (state.registrationOpenAt == 0) {\\n            return false;\\n        } else {\\n            return\\n                state.registrationOpenAt < block.timestamp + tbg.instances[gameId].settings.timeToJoin ? true : false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can start. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can start.\\n     */\\n    function canStart(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (state.hasStarted) return false;\\n        if (state.registrationOpenAt == 0) return false;\\n        if (gameId == 0) return false;\\n        if (block.timestamp <= state.registrationOpenAt + tbg.instances[gameId].settings.timeToJoin) return false;\\n        if (state.players.length() < tbg.instances[gameId].settings.minPlayerCnt) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can start early. `gameId` is the ID of the game.\\n     * By \\\"early\\\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can start early.\\n     */\\n    function canStartEarly(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        if ((state.players.length() == tbg.instances[gameId].settings.maxPlayerCnt) || canStart(gameId)) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Internal function to perform common game start operations\\n     * @param gameId The ID of the game to start\\n     * @param state The game state storage reference\\n     * @param tbg The TBG storage reference\\n     */\\n    function _performGameStart(uint256 gameId, State storage state, TBGStorageStruct storage tbg) private {\\n        require(state.hasStarted == false, \\\"startGame->already started\\\");\\n        require(state.registrationOpenAt != 0, \\\"startGame->Game registration was not yet open\\\");\\n        require(gameId != 0, \\\"startGame->Game not found\\\");\\n        require(state.players.length() >= tbg.instances[gameId].settings.minPlayerCnt, \\\"startGame->Not enough players\\\");\\n\\n        state.hasStarted = true;\\n        state.hasEnded = false;\\n        state.currentTurn = 1;\\n        state.turnStartedAt = block.timestamp;\\n        state.startedAt = block.timestamp;\\n        _resetPlayerStates(state);\\n\\n        // Initialize all players as active\\n        uint256 playerCount = state.players.length();\\n        state.numActivePlayers = playerCount;\\n        for (uint256 i = 0; i < playerCount; i++) {\\n            address player = state.players.at(i);\\n            state.isActive[player] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Starts a game with the provided game ID early. `gameId` is the ID of the game.\\n     * By \\\"early\\\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - The game with `gameId` must not have started.\\n     * - The game with `gameId` must have opened registration.\\n     * - The number of players in the game with `gameId` must be greater than or equal to the minimum number of players.\\n     * - The number of players in the game with `gameId` must be equal to the maximum number of players or the current block timestamp must be greater than the registration open time plus the time to join.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\\n     * - Resets the states of the players in the game with `gameId`.\\n     */\\n    function startGameEarly(uint256 gameId) internal {\\n        State storage state = _getState(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        require(\\n            (state.players.length() == tbg.instances[gameId].settings.maxPlayerCnt) ||\\n                (block.timestamp > state.registrationOpenAt + tbg.instances[gameId].settings.timeToJoin),\\n            \\\"startGame->Not enough players\\\"\\n        );\\n\\n        _performGameStart(gameId, state, tbg);\\n    }\\n\\n    /**\\n     * @dev Starts a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - The game with `gameId` must not have started.\\n     * - The game with `gameId` must have opened registration.\\n     * - The current block timestamp must be greater than the registration open time plus the time to join.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\\n     * - Resets the states of the players in the game with `gameId`.\\n     */\\n    function startGame(uint256 gameId) internal {\\n        State storage state = _getState(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        require(\\n            block.timestamp > state.registrationOpenAt + tbg.instances[gameId].settings.timeToJoin,\\n            \\\"startGame->Still Can Join\\\"\\n        );\\n\\n        _performGameStart(gameId, state, tbg);\\n    }\\n\\n    /**\\n     * @dev Gets the current turn of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The current turn of the game with `gameId`.\\n     */\\n    function getTurn(uint256 gameId) internal view returns (uint256) {\\n        State storage state = _getState(gameId);\\n        return state.currentTurn;\\n    }\\n\\n    /**\\n     * @dev Gets the game master of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The game master of the game with `gameId`.\\n     */\\n    function getGM(uint256 gameId) internal view returns (address) {\\n        Settings storage settings = getSettings(gameId);\\n        return settings.gameMaster;\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn is the last turn in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn is the last turn in the game.\\n     */\\n    function isLastTurn(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        State storage state = _getState(gameId);\\n        if (state.currentTurn == tbg.instances[gameId].settings.maxTurns) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is over. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is over.\\n     */\\n    function isGameOver(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        State storage state = _getState(gameId);\\n        if ((state.currentTurn > tbg.instances[gameId].settings.maxTurns) && !state.isOvertime) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID is not over. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must not be over.\\n     */\\n    function enforceIsNotOver(uint256 gameId) internal view {\\n        require(!isGameOver(gameId), \\\"Game over\\\");\\n    }\\n\\n    /**\\n     * @dev Records a player's move in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must have started.\\n     * - The game with `gameId` must not be over.\\n     * - `player` must not have made a move in the current turn of the game with `gameId`.\\n     * - `player` must be in the game with `gameId`.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the madeMove of `player` in the game with `gameId` to true.\\n     * - Increments the numPlayersMadeMove of the game with `gameId`.\\n     */\\n    function playerMove(uint256 gameId, address player) internal onlyInTurnTime(gameId) {\\n        State storage state = _getState(gameId);\\n        enforceHasStarted(gameId);\\n        enforceIsNotOver(gameId);\\n        require(state.madeMove[player] == false, \\\"already made a move\\\");\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n        state.madeMove[player] = true;\\n        state.numPlayersMadeMove += 1;\\n\\n        // Set player as active when they make a move\\n        state.isActive[player] = true;\\n        state.numActivePlayers++;\\n    }\\n\\n    function isPlayerTurnComplete(uint256 gameId, address player) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        return state.madeMove[player];\\n    }\\n\\n    /**\\n     * @dev Enforces that a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - `player` must be in the game with `gameId`.\\n     */\\n    function enforceIsPlayingGame(uint256 gameId, address player) internal view {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game has started.\\n     */\\n    function hasStarted(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        return state.hasStarted;\\n    }\\n\\n    /**\\n     * @dev Gets the leaderboard of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\\n     */\\n    function getLeaderBoard(uint256 gameId) internal view returns (address[] memory) {\\n        State storage state = _getState(gameId);\\n        return state.leaderboard;\\n    }\\n\\n    /**\\n     * @dev Advances to the next turn in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must be able to end the current turn early. (all players have moved or the turn has timed out)\\n     *\\n     * Modifies:\\n     *\\n     * - Clears the current moves in the game with `gameId`.\\n     * - Increments the currentTurn of the game with `gameId`.\\n     * - Sets the turnStartedAt of the game with `gameId` to the current block timestamp.\\n     * - If the current turn is the last turn or the game with `gameId` is in overtime, checks if the game is a tie and sets the isOvertime of the game with `gameId` to the result.\\n     * - Sets the hasEnded of the game with `gameId` to whether the game is over.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn is the last turn.\\n     * - A boolean indicating whether the game is a tie.\\n     * - A boolean indicating whether the game is over.\\n     */\\n    function nextTurn(uint256 gameId) internal returns (bool, bool, bool) {\\n        require(canEndTurnEarly(gameId), \\\"nextTurn->CanEndEarly\\\");\\n        State storage state = _getState(gameId);\\n        bool wasLastTurn = isLastTurn(gameId);\\n        state.currentTurn += 1;\\n        state.turnStartedAt = block.timestamp;\\n        bool _isLastTurn = isLastTurn(gameId);\\n        if (wasLastTurn || state.isOvertime) {\\n            bool _isTie = isTie(gameId);\\n            state.isOvertime = _isTie;\\n        }\\n        state.hasEnded = isGameOver(gameId);\\n\\n        // Update player activity status for next turn\\n        uint256 playerCount = state.players.length();\\n        state.numActivePlayers = 0;\\n\\n        for (uint256 i = 0; i < playerCount; i++) {\\n            address player = state.players.at(i);\\n            // If player didn't make a move this turn, mark them as inactive\\n            if (!state.madeMove[player]) {\\n                // console.log('LibTBG::nextTurn - ','player inactive!');\\n                state.isActive[player] = false;\\n            } else {\\n                // console.log('LibTBG::nextTurn - ','player active!');\\n                state.numActivePlayers++;\\n            }\\n            state.madeMove[player] = false;\\n        }\\n        state.numPlayersMadeMove = 0;\\n\\n        (state.leaderboard, ) = sortByScore(gameId);\\n        return (_isLastTurn, state.isOvertime, state.hasEnded);\\n    }\\n\\n    /**\\n     * @dev Gets the data storage pointer.\\n     *\\n     * Returns:\\n     *\\n     * - The data storage pointer.\\n     */\\n    function getDataStorage() internal pure returns (bytes32 pointer) {\\n        return IMPLEMENTATION_STORAGE_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the game data storage pointer of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The game data storage pointer of the game with `gameId`.\\n     */\\n    function getGameDataStorage(uint256 gameId) internal view returns (bytes32 pointer) {\\n        Settings storage settings = getSettings(gameId);\\n        return settings.implementationStoragePointer;\\n    }\\n\\n    /**\\n     * @dev Gets the number of players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The number of players in the game with `gameId`.\\n     */\\n    function getPlayersNumber(uint256 gameId) internal view returns (uint256) {\\n        State storage state = _getState(gameId);\\n        return state.players.length();\\n    }\\n\\n    /**\\n     * @dev Gets the players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`.\\n     */\\n    function getPlayers(uint256 gameId) internal view returns (address[] memory) {\\n        State storage state = _getState(gameId);\\n        return state.players.values();\\n    }\\n\\n    /**\\n     * @dev Gets the game settings.\\n     *\\n     * Returns:\\n     *\\n     * - The game settings.\\n     */\\n    function getSettings(uint256 gameId) internal view returns (Settings storage) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.instances[gameId].settings;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID is in the pre-registration stage. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - Registration must not be open for the game with `gameId`.\\n     * - The game with `gameId` must not have started.\\n     */\\n    function enforceIsPreRegistrationStage(uint256 gameId) internal view {\\n        require(!isRegistrationOpen(gameId), \\\"Cannot do when registration is open\\\");\\n        require(!hasStarted(gameId), \\\"Cannot do when game started\\\");\\n    }\\n\\n    /**\\n     * @dev Adds overtime to a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the isOvertime of the game with `gameId` to true.\\n     */\\n    function addOvertime(uint256 gameId) internal {\\n        State storage state = _getState(gameId);\\n        state.isOvertime = true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is in overtime. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is in overtime.\\n     */\\n    function isOvertime(uint256 gameId) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        return state.isOvertime;\\n    }\\n\\n    /**\\n     * @dev Resets the overtime of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the isOvertime of the game with `gameId` to false.\\n     */\\n    function resetOvertime(uint256 gameId) internal {\\n        State storage state = _getState(gameId);\\n        state.isOvertime = false;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is a tie. `gameId` is the ID of the game.\\n     * Tie being defined as at least two of the top `numWinners=1` players having the same score.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is a tie.\\n     */\\n    function isTie(uint256 gameId) internal view returns (bool) {\\n        (, uint256[] memory scores) = getScores(gameId);\\n\\n        LibArray.quickSort(scores, int256(0), int256(scores.length - 1));\\n\\n        if (scores[0] == scores[1]) {\\n            return (true);\\n        }\\n\\n        return (false);\\n    }\\n\\n    /**\\n     * @dev Gets the game ID of the game a player is in. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - The game ID of the game `player` is in.\\n     */\\n    function getPlayersGame(address player) internal view returns (uint256) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        return tbg.playerInGame[player];\\n    }\\n\\n    /**\\n     * @dev Sorts the players and scores arrays in descending order of scores using the quicksort algorithm. `players` is the array of player addresses. `scores` is the array of scores. `left` is the left index. `right` is the right index.\\n     *\\n     * Modifies:\\n     *\\n     * - Sorts the `players` and `scores` arrays in place.\\n     */\\n    function _quickSort(address[] memory players, uint256[] memory scores, int256 left, int256 right) private view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = scores[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (scores[uint256(i)] > pivot) ++i;\\n            while (pivot > scores[uint256(j)]) j--;\\n            if (i <= j) {\\n                (scores[uint256(i)], scores[uint256(j)]) = (scores[uint256(j)], scores[uint256(i)]);\\n                (players[uint256(i)], players[uint256(j)]) = (players[uint256(j)], players[uint256(i)]);\\n                ++i;\\n                j--;\\n            }\\n        }\\n        if (left < j) _quickSort(players, scores, left, j);\\n        if (i < right) _quickSort(players, scores, i, right);\\n    }\\n\\n    /**\\n     * @dev Sorts the players in a game with the provided game ID by score in descending order. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\\n     * - An array of the scores of the players in the game with `gameId`, sorted in descending order.\\n     */\\n    function sortByScore(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\\n        _quickSort(players, scores, 0, int256(scores.length - 1));\\n        return (players, scores);\\n    }\\n\\n    function isActive(uint256 gameId, address player) internal view returns (bool) {\\n        State storage state = _getState(gameId);\\n        return state.isActive[player];\\n    }\\n}\\n\",\"keccak256\":\"0x0a5af57d421f29b43b0aef33745783f38edebe38d493c386ef5a25f2708da49d\",\"license\":\"MIT\"},\"src/mocks/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title MockERC20\\n * @notice Mock ERC20 token for testing purposes\\n * @dev Implements a basic ERC20 token with mint and burn capabilities,\\n *      used for testing token interactions in the Rankify ecosystem\\n * @author Peeramid Labs, 2024\\n */\\ncontract MockERC20 is ERC20Burnable, Ownable {\\n    constructor(string memory name_, string memory symbol_, address owner) ERC20(name_, symbol_) Ownable(owner) {\\n        require(owner != address(0), \\\"must specify owner of the contract\\\");\\n        transferOwnership(owner);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        require(to != address(0), \\\"MockERC20->mint: Address not specified\\\");\\n        require(amount != 0, \\\"MockERC20->mint: amount not specified\\\");\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x45c30b8ecd7ad07f9b7b2307c3d5642cb61e69c483751004e1942b42b2ce25eb\",\"license\":\"MIT\"},\"src/modifiers/OnlyOwnerDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"../vendor/diamond/libraries/LibDiamond.sol\\\";\\n\\n// import \\\"./interfaces/IERC173.sol\\\";\\n\\ncontract OnlyOwnerDiamond {\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbd7d10fcb4f303a983bb0526fea54b6968d90b45d0f383cae445b3c6d7144d58\",\"license\":\"MIT\"},\"src/tokens/DistributableGovernanceERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.8.28;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n// import {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20MetadataUpgradeable.sol\\\"\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ERC20VotesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/// @notice The settings for the initial mint of the token.\\n/// @param receivers The receivers of the tokens.\\n/// @param amounts The amounts of tokens to be minted for each receiver.\\n/// @dev The lengths of `receivers` and `amounts` must match.\\nstruct MintSettings {\\n    address[] receivers;\\n    uint256[] amounts;\\n}\\n\\n/// @title IERC20MintableUpgradeable\\n/// @notice Interface to allow minting of [ERC-20](https://eips.ethereum.org/EIPS/eip-20) tokens.\\ninterface IERC20MintableUpgradeable {\\n    /// @notice Mints [ERC-20](https://eips.ethereum.org/EIPS/eip-20) tokens for a receiving address.\\n    /// @param _to The receiving address.\\n    /// @param _amount The amount of tokens.\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\\n/// @title DistributableGovernanceERC20\\n/// @author Peeramid Labs, adapted version from Aragon Association\\n/// @notice An [OpenZeppelin `Votes`](https://docs.openzeppelin.com/contracts/4.x/api/governance#Votes) compatible [ERC-20](https://eips.ethereum.org/EIPS/eip-20) token that can be used for voting and is managed by a DAO.\\ncontract DistributableGovernanceERC20 is\\n    IERC20MintableUpgradeable,\\n    Initializable,\\n    ERC165Upgradeable,\\n    ERC20VotesUpgradeable,\\n    ERC7746Middleware,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// @notice Thrown if the number of receivers and amounts specified in the mint settings do not match.\\n    /// @param receiversArrayLength The length of the `receivers` array.\\n    /// @param amountsArrayLength The length of the `amounts` array.\\n    error MintSettingsArrayLengthMismatch(uint256 receiversArrayLength, uint256 amountsArrayLength);\\n\\n    /// @notice Calls the initialize function.\\n    /// @param _name The name of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _symbol The symbol of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _mintSettings The token mint settings struct containing the `receivers` and `amounts`.\\n    constructor(string memory _name, string memory _symbol, MintSettings memory _mintSettings, address _accessManager) {\\n        initialize(_name, _symbol, _mintSettings, _accessManager);\\n    }\\n\\n    /// @notice Initializes the contract and mints tokens to a list of receivers.\\n    /// @param _name The name of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _symbol The symbol of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _mintSettings The token mint settings struct containing the `receivers` and `amounts`.\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        MintSettings memory _mintSettings,\\n        address accessManager\\n    ) public initializer {\\n        LibMiddleware.LayerStruct[] memory layers = new LibMiddleware.LayerStruct[](1);\\n\\n        // Set the layer for the sender\\n        layers[0] = LibMiddleware.LayerStruct({layerAddess: accessManager, layerConfigData: \\\"\\\"});\\n        LibMiddleware.setLayers(layers);\\n\\n        // Check mint settings\\n        if (_mintSettings.receivers.length != _mintSettings.amounts.length) {\\n            revert MintSettingsArrayLengthMismatch({\\n                receiversArrayLength: _mintSettings.receivers.length,\\n                amountsArrayLength: _mintSettings.amounts.length\\n            });\\n        }\\n\\n        __ERC20_init(_name, _symbol);\\n\\n        for (uint256 i; i < _mintSettings.receivers.length; ++i) {\\n            _mint(_mintSettings.receivers[i], _mintSettings.amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC20Upgradeable).interfaceId ||\\n            // interfaceId == type(ERC20PermitUpgradeable).interfaceId ||\\n            interfaceId == type(IERC20Metadata).interfaceId ||\\n            interfaceId == type(VotesUpgradeable).interfaceId ||\\n            interfaceId == type(IERC20MintableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Mints tokens to an address.\\n    /// @param to The address receiving the tokens.\\n    /// @param amount The amount of tokens to be minted.\\n    function mint(\\n        address to,\\n        uint256 amount\\n    ) external override nonReentrant ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _mint(to, amount);\\n    }\\n\\n    // https://forum.openzeppelin.com/t/self-delegation-in-erc20votes/17501/12?u=novaknole\\n    /// @inheritdoc ERC20VotesUpgradeable\\n    function _update(address from, address to, uint256 amount) internal override {\\n        super._update(from, to, amount);\\n\\n        // Automatically turn on delegation on mint/transfer but only for the first time.\\n        if (to != address(0) && numCheckpoints(to) == 0 && delegates(to) == address(0)) {\\n            _delegate(to, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64f1d9dee56c666bc96ea7415752b8df253e102f9c3d96ea73b36e4eaf47acc9\",\"license\":\"AGPL-3.0-or-later\"},\"src/tokens/Rankify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Rankify is ERC20Votes, Ownable {\\n    /**\\n     * @dev Total supply cap has been exceeded.\\n     */\\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\\n\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev The supplied cap is not a valid cap.\\n     */\\n    error ERC20InvalidCap(uint256 cap);\\n\\n    constructor(\\n        address owner\\n    ) ERC20(\\\"Rankify\\\", \\\"RFY\\\") EIP712(\\\"RankifyToken\\\", \\\"0.12.0\\\") Ownable(owner) {\\n        _cap = 10 ** 18;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        super._update(from, to, value);\\n\\n        if (from == address(0)) {\\n            uint256 maxSupply = cap();\\n            uint256 supply = totalSupply();\\n            if (supply > maxSupply) {\\n                revert ERC20ExceededCap(supply, maxSupply);\\n            }\\n        }\\n    }\\n\\n        /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x045919bbc5fe3ca2ee69e42612d1474dfafb4c3675893a0e3d7d7547002ba6fa\",\"license\":\"MIT\"},\"src/vendor/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n*  Adapted from\\n*  Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x238f7bcdbbedfac48b94cbc9d4a15e16fb5c9c09fb41a8c72e2a7ff48c81f24b\",\"license\":\"MIT\"},\"src/vendor/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n    error DuplicateSignature(bytes4 _selector);\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            // this is removed in order to work with ethereum distribution system\\n            // require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xe950ec25dddc4b273011dbba8c2bbdbef7888968066f102e279384893206620c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50615ecd8061001f6000396000f3fe6080604052600436106101cd5760003560e01c80638d3b80b3116100f7578063b881cffe11610095578063cca84a0c11610064578063cca84a0c146105a2578063de838048146105c2578063f23a6e61146105ef578063f72ea4671461060f57600080fd5b8063b881cffe14610522578063bab0ac0314610542578063bc197c8114610562578063bfa640361461058257600080fd5b80639a214b1e116100d15780639a214b1e146104a2578063aee5f34a146104c2578063b0e8bc35146104e2578063b55991c01461050257600080fd5b80638d3b80b3146104425780638eed01f8146104625780639637460e1461048257600080fd5b80633f663d241161016f57806358759df71161013e57806358759df7146103c057806369958ab9146103e0578063730b8381146104005780637f4e48491461042057600080fd5b80633f663d24146103335780633feef58a146103535780634024ba7514610373578063460e20491461039357600080fd5b80633528dff7116101ab5780633528dff71461029257806337eb5109146102c057806338abc5a2146102ee578063392b749c1461030357600080fd5b806304527d90146101d25780630479130914610209578063150b7a0214610241575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046151b9565b61062f565b604051610200929190615217565b60405180910390f35b34801561021557600080fd5b506102296102243660046151b9565b610644565b6040516001600160a01b039091168152602001610200565b34801561024d57600080fd5b5061026161025c3660046152d6565b610662565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610200565b34801561029e57600080fd5b506102b26102ad3660046151b9565b6106b0565b604051610200929190615379565b3480156102cc57600080fd5b506102e06102db3660046153b2565b6107c8565b604051908152602001610200565b6103016102fc3660046154a7565b6108bd565b005b34801561030f57600080fd5b5061032361031e3660046151b9565b610a9e565b6040519015158152602001610200565b34801561033f57600080fd5b5061030161034e36600461555d565b610aaf565b34801561035f57600080fd5b5061030161036e3660046151b9565b610b9c565b34801561037f57600080fd5b5061032361038e3660046151b9565b610c32565b34801561039f57600080fd5b506103b36103ae3660046151b9565b610c3d565b6040516102009190615650565b3480156103cc57600080fd5b506103236103db3660046151b9565b610c48565b3480156103ec57600080fd5b506103016103fb3660046151b9565b610c53565b34801561040c57600080fd5b5061030161041b366004615663565b610d1d565b34801561042c57600080fd5b50610435610d74565b6040516102009190615685565b34801561044e57600080fd5b5061032361045d366004615787565b610ece565b34801561046e57600080fd5b5061032361047d3660046151b9565b610f09565b34801561048e57600080fd5b5061032361049d3660046151b9565b610f14565b3480156104ae57600080fd5b506102e06104bd3660046151b9565b610f3b565b3480156104ce57600080fd5b506102296104dd3660046151b9565b610f4d565b3480156104ee57600080fd5b506103016104fd366004615663565b610f6b565b34801561050e57600080fd5b506102e061051d3660046151b9565b611158565b34801561052e57600080fd5b5061032361053d3660046151b9565b61117c565b34801561054e57600080fd5b5061032361055d366004615787565b611187565b34801561056e57600080fd5b5061026161057d3660046157f8565b6111c2565b34801561058e57600080fd5b506102e061059d3660046158bf565b611213565b3480156105ae57600080fd5b506103016105bd3660046151b9565b611250565b3480156105ce57600080fd5b506105e26105dd3660046151b9565b6112a3565b60405161020091906158da565b3480156105fb57600080fd5b5061026161060a3660046158ed565b611394565b34801561061b57600080fd5b5061022961062a3660046151b9565b6113e3565b60608061063b83611410565b91509150915091565b600061064f826114fb565b601101546001600160a01b031692915050565b600061066c611521565b306001600160a01b038716036106a357507f150b7a02000000000000000000000000000000000000000000000000000000006106a7565b5060005b95945050505050565b60606000806106da846000908152600080516020615e788339815191526020526040902060080190565b905060006106e785611585565b90506000815167ffffffffffffffff811115610705576107056153cd565b60405190808252806020026020018201604052801561072e578160200160208202803683370190505b50905060005b82518110156107b55783600701600084838151811061075557610755615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1682828151811061079d5761079d615965565b91151560209283029190910190910152600101610734565b5080836009015494509450505050915091565b6000806107d36115b4565b604080516060808201835283548252600184015460ff1615156020808401919091528351610160810185526002860154815260038601546bffffffffffffffffffffffff8116928201929092526c010000000000000000000000009091046001600160a01b03908116828601526004860154811692820192909252600585015482166080820152600685015460a08201526007850154821660c08201526008850154821660e082015260098501548216610100820152600a8501548216610120820152600b909401541661014084015290810182905291506108b69084906115dd565b9392505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff16156109355760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f74207061737321000000000000000060448201526064015b60405180910390fd5b805460ff1916600117815542831161098f5760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520646561646c696e652068617320706173736564000000604482015260640161092c565b6000610a337fd3bd306206eb750ea9d44d832310282e4267987d2f047c29fc09232a1e8005e633898888886040516020016109ca919061599f565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e00160405160208183030381529060405280519060200120611609565b9050610a4187338884611651565b610a4a8761175c565b336001600160a01b0316877f82b857b30a7678f4bcb524e2a7f621e7140b3a452ea8c5c56331c6b5dcba44888786604051610a869291906159bb565b60405180910390a350805460ff191690555050505050565b6000610aa9826117c1565b92915050565b610ab7611521565b6000610ac16115b4565b9050600060405180610180016040528083600001546001610ae29190615a0b565b815260200184600001518152602001336001600160a01b031681526020018460200151815260200184604001518152602001846080015181526020018460a001516001600160a01b0316815260200184606001516bffffffffffffffffffffffff1681526020018460c001516001600160801b031681526020018460e001516001600160801b031681526020018461010001516001600160801b031681526020018461012001518152509050610b978161181e565b505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff1615610c0f5760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff19166001178155610c27823361191661195a565b805460ff1916905550565b6000610aa982611972565b6060610aa982611585565b6000610aa9826119e3565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff1615610cc65760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff19166001178155610cdb8233611afb565b610ce782611916611b71565b60405182907f71f4c9aec1b2c51302bcaf09a3f4985709759853536445493905081899603a2190600090a2805460ff1916905550565b610d2682611bc0565b610d2f82611c1d565b6000610d3a836114fb565b6009810183905560405190915083907f50ad08f58a27f2851d7e3a1b3a6a46b290f2ce677e99642d30ff639721e7779090600090a2505050565b610de76040805160608082018352600080835260208084018290528451610160810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152909182015290565b6000610df16115b4565b604080516060808201835283548252600184015460ff1615156020808401919091528351610160810185526002860154815260038601546bffffffffffffffffffffffff8116928201929092526c010000000000000000000000009091046001600160a01b03908116828601526004860154811692820192909252600585015482166080820152600685015460a08201526007850154821660c08201526008850154821660e082015260098501548216610100820152600a8501548216610120820152600b90940154166101408401529081019190915292915050565b6000828152600080516020615e78833981519152602090815260408083206001600160a01b0385168452600f0190915281205460ff166108b6565b6000610aa982611cd4565b6000818152600080516020615e78833981519152602052604081206014015460ff16610aa9565b6000610f46826114fb565b5492915050565b6000610f58826114fb565b600301546001600160a01b031692915050565b80600003610fbb5760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f742073706563696679207a65726f206578697420616d6f756e7400604482015260640161092c565b6000610fc56115b4565b60048101546007820154600683015492935060028401926001600160a01b039283169290911690600090610ffa908890615b05565b84546110069190615b11565b6110109087615b11565b6040517ff5298aca00000000000000000000000000000000000000000000000000000000815233600482015260248101899052604481018890529091506001600160a01b0384169063f5298aca90606401600060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b50506040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b03851692506340c10f199150604401600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b5050604080518a8152602081018a90529081018490523392507f21e56d8662c78d8f3e594a1e36359dddfa7296f292849962ce1f75a663938cc9915060600160405180910390a250505050505050565b6000818152600080516020615e788339815191526020526040812060080154610aa9565b6000610aa982611d1d565b6000828152600080516020615e78833981519152602090815260408083206001600160a01b038516845260100190915281205460ff166108b6565b60006111cc611521565b306001600160a01b038a160361120357507fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621611207565b5060005b98975050505050505050565b6001600160a01b03811660009081527faa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c7486020526040812054610aa9565b61125981611bc0565b6112638133611afb565b61126c81611d58565b61127581611e43565b60405181907f5da9fef10786347975dd7cc4fc53417cff6969b0f7a9b6763169306c8cbeb63690600090a250565b606060006112b0836114fb565b905060006112bd84611585565b90506000815167ffffffffffffffff8111156112db576112db6153cd565b604051908082528060200260200182016040528015611304578160200160208202803683370190505b50905060005b825181101561138b5783601001600084838151811061132b5761132b615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1682828151811061137357611373615965565b9115156020928302919091019091015260010161130a565b50949350505050565b600061139e611521565b306001600160a01b038816036113d557507ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf976113d9565b5060005b9695505050505050565b6000818152600080516020615e7883398151915260205260408120600601546001600160a01b0316610aa9565b606080600061141e84611585565b90506000815167ffffffffffffffff81111561143c5761143c6153cd565b604051908082528060200260200182016040528015611465578160200160208202803683370190505b50905060005b82518110156114f0576114cb8684838151811061148a5761148a615965565b60200260200101516000918252600080516020615e78833981519152602090815260408084206001600160a01b039390931684526013909201905290205490565b8282815181106114dd576114dd615965565b602090810291909101015260010161146b565b509094909350915050565b6000818152600080516020615e78833981519152602052604081206007015481906108b6565b600061152b6115b4565b600181015490915060ff166115825760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79496e697469616c697a65640000000000000000000000000000000000604482015260640161092c565b50565b6000818152600080516020615e788339815191526020526040902060609060088101906108b690600d01611ebc565b6000807fa12d076190200dcdcbe467d038e4860de98e28ac6ff33e86413a723b4ebb26be610aa9565b60006108b6826000015183602001516bffffffffffffffffffffffff16856001600160801b0316611ec9565b6000610aa9611616611f84565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b61165a84611bc0565b6116648484612055565b61166e848461209c565b600061167a8284612286565b9050806001600160a01b03166116b5866000908152600080516020615e7883398151915260205260409020600601546001600160a01b031690565b6001600160a01b031614829061175457604080517fc85d473600000000000000000000000000000000000000000000000000000000815260048101929092526024820152602760448201527f4c696252616e6b6966793a3a6a6f696e47616d652d3e696e76616c696420736960648201527f676e617475726500000000000000000000000000000000000000000000000000608482015260a40161092c565b505050505050565b60006117b18260408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b90506117bd81336122b0565b5050565b6000818152600080516020615e7883398151915260208190526040822060018101546008820192916117f590600d01612330565b148061180557506118058461233a565b15611814575060019392505050565b5060009392505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff16156118915760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff191660011781556118a5826123fc565b6118ad61511b565b82516118b99082612bd9565b602083015160c0840151845160405133926001600160a01b0316917f48f48f6273652830aa3718ca489b3d13c244a7215c70bab5c5c2f523aba583b69161190291815260200190565b60405180910390a450805460ff1916905550565b6119208282613015565b6040516001600160a01b0382169083907fb2bd643202385c64d9814c6c3fa61b1ba098d6652292e9d9a6f1a0cdae6eb82490600090a35050565b6119648383613076565b610b9783838363ffffffff16565b6000818152600080516020615e78833981519152602081905260408220600a8101546008909101919083036119ab575060009392505050565b6000848152602082905260409020600301546119c79042615a0b565b8260020154106119d85760006119db565b60015b949350505050565b6000818152600080516020615e7883398151915260205260408120600c81015460089091019060ff161580611a1c5750611a1c83611cd4565b15611a2a5750600092915050565b600080611a3983600501611ebc565b905060005b8151811015611ae957836008016000838381518110611a5f57611a5f615965565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff168015611ace5750836007016000838381518110611aa557611aa5615965565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15611ae15782611add81615b28565b9350505b600101611a3e565b508115806106a757506106a7856130ca565b611b0482611bc0565b6000611b0f836114fb565b60038101549091506001600160a01b03838116911614610b975760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f72000000000000000000000000000000604482015260640161092c565b6000611b7c83611585565b905060005b8151811015611bb657611bae84838381518110611ba057611ba0615965565b60200260200101518561195a565b600101611b81565b50610b978361312f565b611bc8611521565b611bd181613322565b6115825760405162461bcd60e51b815260206004820152600e60248201527f67616d65206e6f7420666f756e64000000000000000000000000000000000000604482015260640161092c565b6000818152600080516020615e78833981519152602081905260409091206001810154600882019291611c5290600d01612330565b1480611c7d57506000838152602082905260409020600301546002830154611c7a9190615a0b565b42115b611cc95760405162461bcd60e51b815260206004820152601d60248201527f737461727447616d652d3e4e6f7420656e6f75676820706c6179657273000000604482015260640161092c565b610b97838383613362565b6000818152600080516020615e7883398151915260208190526040822060048101546008909101805490911080156118055750600c81015460ff16611814575060019392505050565b6000818152600080516020615e7883398151915260208190526040822060048101546008909101805490919003611814575060019392505050565b611d6181611972565b15611dd45760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420646f207768656e20726567697374726174696f6e206973206f60448201527f70656e0000000000000000000000000000000000000000000000000000000000606482015260840161092c565b6000818152600080516020615e7883398151915260205260409020600c015460ff16156115825760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420646f207768656e2067616d6520737461727465640000000000604482015260640161092c565b611e4c81613322565b611e985760405162461bcd60e51b815260206004820152600e60248201527f67616d65206e6f7420666f756e64000000000000000000000000000000000000604482015260640161092c565b6000908152600080516020615e788339815191526020526040902042600a90910155565b606060006108b683613582565b6000838302816000198587098281108382030391505080600003611f0057838281611ef657611ef6615b42565b04925050506108b6565b808411611f1757611f1760038515026011186135de565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b7fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a9546000907fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a7906001600160a01b031630148015611fe55750806001015446145b15611ff05754919050565b61204b8160050154826003015483600401546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b91505090565b5090565b600061205f6115b4565b9050600061206c846114fb565b905060018160000154111561209657805460048301546120969185916001600160a01b03166135f0565b50505050565b6000828152600080516020615e788339815191526020819052604090912060088101906120c885613322565b6121145760405162461bcd60e51b815260206004820152601760248201527f616464506c617965722d3e696e76616c69642067616d65000000000000000000604482015260640161092c565b6001600160a01b03841660009081526001840160205260409020541561217c5760405162461bcd60e51b815260206004820152601960248201527f616464506c617965722d3e506c6179657220696e2067616d6500000000000000604482015260640161092c565b806001015461218d83600501612330565b106121da5760405162461bcd60e51b815260206004820152601560248201527f616464506c617965722d3e70617274792066756c6c0000000000000000000000604482015260640161092c565b6121e38561367c565b61222f5760405162461bcd60e51b815260206004820152601860248201527f616464506c617965722d3e63616e74206a6f696e206e6f770000000000000000604482015260640161092c565b61223c60058301856136c9565b50506001600160a01b0390921660009081526007830160209081526040808320805460ff199081169091556008909501825280832080549095169094556001929092019091522055565b60008060008061229686866136de565b9250925092506122a6828261372b565b5090949350505050565b600c82015460ff166123045760405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f74206578697374000000000000000000604482015260640161092c565b61231282823030303061382f565b60018260080160008282546123279190615a0b565b90915550505050565b6000610aa9825490565b6000818152600080516020615e78833981519152602081905260408220600c8101546008909101919060ff1615612375575060009392505050565b816002015460000361238b575060009392505050565b8360000361239d575060009392505050565b60008481526020829052604090206003015460028301546123be9190615a0b565b42116123ce575060009392505050565b6000848152602082905260409020600201546123ec60058401612330565b10156119d8575060009392505050565b612404611521565b600061240e6115b4565b60e0830151600382015460029092019250612436916bffffffffffffffffffffffff16615b58565b600182015460e08401516bffffffffffffffffffffffff918216929091161561248a5760405163b61659cd60e01b81526bffffffffffffffffffffffff92831660048201529116602482015260440161092c565b505060e082015160018201546124ae91906bffffffffffffffffffffffff16615b58565b60018201546101008401516bffffffffffffffffffffffff918216929091161561250a5760405163b61659cd60e01b81526bffffffffffffffffffffffff90921660048301526001600160801b0316602482015260440161092c565b50508160e001516bffffffffffffffffffffffff1682610100015161252f9190615b90565b60e083015161010084015190916001600160801b0316156125825760405163b61659cd60e01b81526bffffffffffffffffffffffff90921660048301526001600160801b0316602482015260440161092c565b505060008261010001516001600160801b0316116126085760405162461bcd60e51b815260206004820152602760248201527f4c696252616e6b6966793a3a6e657747616d652d3e4d696e2067616d6520746960448201527f6d65207a65726f00000000000000000000000000000000000000000000000000606482015260840161092c565b60e082015160026bffffffffffffffffffffffff821611612666576040517f534985a70000000000000000000000000000000000000000000000000000000081526bffffffffffffffffffffffff909116600482015260240161092c565b5060006040518061010001604052808461012001516001600160801b0316815260200184608001518152602001846060015181526020018461014001516001600160801b031681526020018460e001516bffffffffffffffffffffffff1681526020018460a0015181526020018460c001516001600160a01b031681526020016000801b815250905060006126f96115b4565b84519091506127089083613b5f565b600061271785600001516114fb565b905061272b8560a001518660800151613cb4565b8051600a8301556020810151600b83015560400151600c820155610160850151600182019061275a9082615c3f565b506001840154612779906bffffffffffffffffffffffff166010615b11565b60018501546101008701516127b7916127ab916bffffffffffffffffffffffff909116906001600160801b0316615cfe565b60ff81901d9081011890565b106128045760405162461bcd60e51b815260206004820152601b60248201527f4d696e2067616d652074696d65206f7574206f6620626f756e64730000000000604482015260640161092c565b84606001518460040154111561285c5760405162461bcd60e51b815260206004820152601860248201527f4d696e20706c6179657220636f756e7420746f6f206c6f770000000000000000604482015260640161092c565b6101008086015160408051610160810182528754815260018801546bffffffffffffffffffffffff811660208301526001600160a01b036c01000000000000000000000000909104811692820192909252600288015482166060820152600388015482166080820152600488015460a08201526005880154821660c08201526006880154821660e082015260078801548216938101939093526008870154811661012084015260098701541661014083015260009161291b91906115dd565b9050600061292c826009600a611ec9565b9050600061293a8284615d1e565b6003880154600189015460408b81015190517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101879052939450918216926c01000000000000000000000000909104909116906379cc679090604401600060405180830381600087803b1580156129c557600080fd5b505af11580156129d9573d6000803e3d6000fd5b50505050600188015460408a81015190516323b872dd60e01b81526001600160a01b0391821660048201528382166024820152604481018590526c0100000000000000000000000090920416906323b872dd906064016020604051808303816000875af1158015612a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a729190615d31565b508860200151600003612ab1576040517fc7fa2ae200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604089015160038601805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905585546001908790600090612af9908490615a0b565b909155505060208901518086556101008a01516001600160801b0316600287015560048701546001600160a01b031690819063731133e9903090600190612b409082615a0b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152608060648201526000608482015260a4015b600060405180830381600087803b158015612bb557600080fd5b505af1158015612bc9573d6000803e3d6000fd5b5050505050505050505050505050565b6000612c2e8360408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b9050806008015460001480612c59575080600701548160060154612c529190615a0b565b8160080154145b612ccb5760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206d757461746520706f736974696f6e2077697468206375727260448201527f656e746c7920706f7369746976652062616c616e636500000000000000000000606482015260840161092c565b815180516001830155602081015160028301556040810151600383015560608101516004830155608001516005820155612d09600a82016000615165565b612d17600b82016000615165565b612d25600982016000615183565b60005b8260200151518110156130025781600a0183602001518281518110612d4f57612d4f615965565b602090810291909101810151518254600181018455600093845292829020909201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909316929092179091558301518051600b8401919083908110612db657612db6615965565b602090810291909101810151810151825460018101845560009384529282902090920191909155830151805160098401919083908110612df857612df8615965565b60209081029190910181015160400151825460018101845560009384529282902091830490910180549192909160ff601f9092166101000a918202191690836002811115612e4857612e48615d53565b021790555082602001518181518110612e6357612e63615965565b60200260200101516060015182600001600085602001518481518110612e8b57612e8b615965565b6020026020010151604001516002811115612ea857612ea8615d53565b6002811115612eb957612eb9615d53565b8152602001908152602001600020600085602001518481518110612edf57612edf615965565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600085602001518481518110612f2357612f23615965565b60209081029190910181015181015182528101919091526040016000208151805182908190612f529082615c3f565b50602091820151600190910155820151805160028301908190612f759082615c3f565b50602091909101516001909101556040820151805160048301908190612f9b9082615c3f565b50602091909101516001909101556060820151805160068301908190612fc19082615c3f565b50602091909101516001909101556080820151805160088301908190612fe79082615c3f565b50602082015181600101555050905050806001019050612d28565b50600c01805460ff191660011790555050565b600061306a8360408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b9050610b978183613e49565b61307f82611bc0565b6130898282613ed2565b60006130936115b4565b905060006130a0846114fb565b905060018160000154111561209657805460048301546120969185916001600160a01b0316614048565b6000806130d6836140a0565b6000848152600080516020615e7883398151915260205260409020600c8101549192506008019060ff161580613110575061311084611cd4565b1561311f575060009392505050565b8115611814575060019392505050565b6000818152600080516020615e7883398151915260208190526040822090919061315b90600d01611ebc565b905060005b815181101561329a5760008481526020849052604081208351601390910190829085908590811061319357613193615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600083600001600086815260200190815260200160002060080160070160008484815181106131f0576131f0615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506000836000016000868152602001908152602001600020600801600801600084848151811061326057613260615965565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101613160565b50600083815260208390526040812060088101829055600c8101805461ffff1916905560148101805460ff191690556132d891601590910190615165565b600083815260208390526040812060118101829055600d019081816132fd8282615165565b5050506000938452505060205260408120600a81018290556009810182905560120155565b6000818152600080516020615e788339815191526020526040812060068101546001600160a01b0316156133595750600192915050565b50600092915050565b600482015460ff16156133b75760405162461bcd60e51b815260206004820152601a60248201527f737461727447616d652d3e616c72656164792073746172746564000000000000604482015260640161092c565b81600201546000036134315760405162461bcd60e51b815260206004820152602d60248201527f737461727447616d652d3e47616d6520726567697374726174696f6e2077617360448201527f206e6f7420796574206f70656e00000000000000000000000000000000000000606482015260840161092c565b826000036134815760405162461bcd60e51b815260206004820152601960248201527f737461727447616d652d3e47616d65206e6f7420666f756e6400000000000000604482015260640161092c565b60008381526020829052604090206002015461349f60058401612330565b10156134ed5760405162461bcd60e51b815260206004820152601d60248201527f737461727447616d652d3e4e6f7420656e6f75676820706c6179657273000000604482015260640161092c565b60048201805461ffff1916600190811790915580835542908301819055600383015561351882614116565b600061352683600501612330565b600a8401819055905060005b8181101561357b5760006135496005860183614172565b6001600160a01b031660009081526008860160205260409020805460ff19166001908117909155919091019050613532565b5050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156135d257602002820191906000526020600020905b8154815260200190600101908083116135be575b50505050509050919050565b634e487b71600052806020526024601cfd5b6040517fe2ab691d0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282919082169063e2ab691d906064015b600060405180830381600087803b15801561365e57600080fd5b505af1158015613672573d6000803e3d6000fd5b5050505050505050565b6000818152600080516020615e7883398151915260205260408120600c81015460089091019060ff16806136b257506002810154155b156136c05750600092915050565b50600192915050565b60006108b6836001600160a01b03841661417e565b600080600083516041036137185760208401516040850151606086015160001a61370a888285856141cd565b955095509550505050613724565b50508151600091506002905b9250925092565b600082600381111561373f5761373f615d53565b03613748575050565b600182600381111561375c5761375c615d53565b03613793576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156137a7576137a7615d53565b036137e1576040517ffce698f70000000000000000000000000000000000000000000000000000000081526004810182905260240161092c565b60038260038111156137f5576137f5615d53565b036117bd576040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004810182905260240161092c565b306001600160a01b03861603613958576002860154156138845760028601546040516001600160a01b0383169180156108fc02916000818181858888f19350505050158015613882573d6000803e3d6000fd5b505b6004860154156138c95760048601546040516001600160a01b0386169180156108fc02916000818181858888f193505050501580156138c7573d6000803e3d6000fd5b505b60058601541561390e5760058601546040516001600160a01b0385169180156108fc02916000818181858888f1935050505015801561390c573d6000803e3d6000fd5b505b6003860154156139535760038601546040516001600160a01b0384169180156108fc02916000818181858888f19350505050158015613951573d6000803e3d6000fd5b505b6139e2565b6003860154600587015460048801546002890154600093929161397a91615a0b565b6139849190615a0b565b61398e9190615a0b565b9050803410156139e05760405162461bcd60e51b815260206004820152601160248201527f6d73672e76616c756520746f6f206c6f77000000000000000000000000000000604482015260640161092c565b505b60005b600a870154811015613b5657600087600a018281548110613a0857613a08615965565b6000918252602082200154600b8a0180546001600160a01b0390921693509084908110613a3757613a37615965565b906000526020600020015490506000896009018481548110613a5b57613a5b615965565b60009182526020808320908204015460ff601f9092166101000a90041691508a81836002811115613a8e57613a8e615d53565b6002811115613a9f57613a9f615d53565b8152602080820192909252604090810160009081206001600160a01b0388168252835281812086825290925281209150826002811115613ae157613ae1615d53565b03613afa57613af584828c8c8c8c8c61429c565b613b47565b6002826002811115613b0e57613b0e615d53565b03613b1e57613af584828c6143eb565b6001826002811115613b3257613b32615d53565b03613b4757613b478484838d8d8d8d8d614568565b505050508060010190506139e5565b50505050505050565b613b6882613322565b15613bb55760405162461bcd60e51b815260206004820152601a60248201527f63726561746547616d652d3e416c726561647920657869737473000000000000604482015260640161092c565b81600003613c055760405162461bcd60e51b815260206004820152601260248201527f63726561746547616d652d3e67616d6549640000000000000000000000000000604482015260640161092c565b613c0f82826148a7565b7faa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c7498054600080516020615e7883398151915291600191600090613c53908490615a0b565b90915550506002810154604080516020810186905290810191909152600080516020615e78833981519152606082015260800160408051601f1981840301815291815281516020928301206000958652929091529092206007019190915550565b613cd860405180606001604052806000815260200160008152602001600081525090565b613cfc60405180606001604052806000815260200160008152602001600081525090565b613d0584614c16565b60208201526000805b6002828460200151613d209190615d1e565b613d2a9190615d69565b613d349082615a0b565b905081613d4081615b28565b925050858110613d0e57858114613dbf5760405162461bcd60e51b815260206004820152603460248201527f717561647261746963566f74696e674572726f723a20766f746543726564697460448201527f73206d75737420626520695e3220736572696573000000000000000000000000606482015260840161092c565b60408301829052818511613e3d576040805162461bcd60e51b81526020600482015260248101919091527f717561647261746963566f74696e674572726f723a204d696e696d756d20566f60448201527f74696e6720706f736974696f6e732061626f7665206d696e20706c6179657273606482015260840161092c565b50509283525090919050565b816008015482600701548360060154613e629190615a0b565b10613eaf5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f7567682062616c616e636520746f20726566756e6400000000604482015260640161092c565b613ebd82308384858661382f565b60018260060160008282546123279190615a0b565b6000828152600080516020615e7883398151915260208190526040909120600801613efc84613322565b613f485760405162461bcd60e51b815260206004820152601360248201527f67616d6520646f6573206e6f7420657869737400000000000000000000000000604482015260640161092c565b6001600160a01b03831660009081526001830160205260409020548414613fb15760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696e207468652067616d650000000000000000000000000000000000604482015260640161092c565b600481015460ff161580613fd45750600481015460ff6101009091041615156001145b6140205760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f74206c65617665206f6e6365207374617274656400000000000000604482015260640161092c565b6001600160a01b038316600090815260018301602052604081205561357b6005820184614d7c565b6040517fb5674c680000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282919082169063b5674c6890606401613644565b6000818152600080516020615e788339815191526020819052604082206008018383036140cf576140cf615d78565b600481015460ff1615156001146140e8576140e8615d78565b60018101546000858152602084905260409020546141069190615a0b565b42116119d8575060009392505050565b60005b61412582600501612330565b8110156117bd57600061413b6005840183614172565b6001600160a01b031660009081526007840160209081526040808320805460ff19169055600b860190915281205550600101614119565b60006108b68383614d91565b60008181526001830160205260408120546141c557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aa9565b506000610aa9565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156142085750600091506003905082614292565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561425c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661428857506000925060019150829050614292565b9250600091508190505b9450945094915050565b6142af8786838960020160010154614dbb565b6142c28786848960040160010154614dbb565b6142d58786868960060160010154614dbb565b6142e88786858960080160010154614dbb565b60018601548790801580159061430757506001600160a01b0387163014155b156143e0576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528291908416906370a0823190602401602060405180830381865afa15801561436e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143929190615d8e565b10156143e05760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820657263323020746f6b656e73000000000000000000604482015260640161092c565b505050505050505050565b6003820154839015801561440157506005830154155b801561440f57506007830154155b801561441d57506009830154155b6144695760405162461bcd60e51b815260206004820152601e60248201527f455243373231207472616e7366657273206e6f7420737570706f727465640000604482015260640161092c565b60018301541580159061448557506001600160a01b0382163014155b15612096576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600091908316906370a0823190602401602060405180830381865afa1580156144ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145119190615d8e565b600185015490915081101561357b5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f756768204552433732312062616c616e636500000000000000604482015260640161092c565b600186015488908015614655576040517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018b90526000919084169062fdd58e90604401602060405180830381865afa1580156145dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146019190615d8e565b9050818110156146535760405162461bcd60e51b815260206004820152601c60248201527f455243313135352062616c616e6365206973206e6f742076616c696400000000604482015260640161092c565b505b50600787015480156146ce57816001600160a01b031663f242432a88888c858d6006016000016040518663ffffffff1660e01b815260040161469b959493929190615da7565b600060405180830381600087803b1580156146b557600080fd5b505af11580156146c9573d6000803e3d6000fd5b505050505b506009870154801561474757816001600160a01b031663f242432a88878c858d6008016000016040518663ffffffff1660e01b8152600401614714959493929190615da7565b600060405180830381600087803b15801561472e57600080fd5b505af1158015614742573d6000803e3d6000fd5b505050505b5060058701548015614855576001600160a01b0384166147e8576040517ff5298aca0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018b90526044820183905283169063f5298aca90606401600060405180830381600087803b1580156147cb57600080fd5b505af11580156147df573d6000803e3d6000fd5b50505050614855565b816001600160a01b031663f242432a88868c858d6004016000016040518663ffffffff1660e01b8152600401614822959493929190615da7565b600060405180830381600087803b15801561483c57600080fd5b505af1158015614850573d6000803e3d6000fd5b505050505b506003870154801561489b57816001600160a01b031663f242432a88858c858d6002016000016040518663ffffffff1660e01b8152600401612b9b959493929190615da7565b50505050505050505050565b6000828152600080516020615e78833981519152602081905260408220835191929091900361493f576040516320ddb3bf60e11b815260206004820152602260248201527f4c69625442473a3a696e69742d3e73657474696e67732e74696d65506572547560448201527f726e000000000000000000000000000000000000000000000000000000000000606482015260840161092c565b82602001516000036149ba576040516320ddb3bf60e11b815260206004820152602360248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d6178506c6179657260448201527f436e740000000000000000000000000000000000000000000000000000000000606482015260840161092c565b6001836040015111614a35576040516320ddb3bf60e11b815260206004820152602360248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d696e506c6179657260448201527f436e740000000000000000000000000000000000000000000000000000000000606482015260840161092c565b8260800151600003614a8a576040516320ddb3bf60e11b815260206004820152601f60248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d61785475726e7300604482015260640161092c565b8260600151600003614adf576040516320ddb3bf60e11b815260206004820152601860248201527f4c69625442473a3a696e69742d3e74696d65546f4a6f696e0000000000000000604482015260640161092c565b8260200151816002015410614b37576040516320ddb3bf60e11b815260206004820152601a60248201527f4c69625442473a3a696e69742d3e6d6178506c61796572436e74000000000000604482015260640161092c565b60c08301516001600160a01b0316614b92576040516320ddb3bf60e11b815260206004820152601860248201527f4c69625442473a3a696e69742d3e67616d654d61737465720000000000000000604482015260640161092c565b506000928352602090815260409283902082518155908201516001820155918101516002830155606081015160038301556080810151600483015560a0810151600583015560c081015160068301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560e00151600790910155565b600060018211614c24575090565b8160017001000000000000000000000000000000008210614c4a5760809190911c9060401b5b680100000000000000008210614c655760409190911c9060201b5b6401000000008210614c7c5760209190911c9060101b5b620100008210614c915760109190911c9060081b5b6101008210614ca55760089190911c9060041b5b60108210614cb85760049190911c9060021b5b60048210614cc45760011b5b600302600190811c90818581614cdc57614cdc615b42565b048201901c90506001818581614cf457614cf4615b42565b048201901c90506001818581614d0c57614d0c615b42565b048201901c90506001818581614d2457614d24615b42565b048201901c90506001818581614d3c57614d3c615b42565b048201901c90506001818581614d5457614d54615b42565b048201901c9050614d73818581614d6d57614d6d615b42565b04821190565b90039392505050565b60006108b6836001600160a01b038416615021565b6000826000018281548110614da857614da8615965565b9060005260206000200154905092915050565b83811561357b57306001600160a01b03851603614eec576001600160a01b03831615614e74576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905282169063a9059cbb906044015b6020604051808303816000875af1158015614e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e6e9190615d31565b5061357b565b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038216906342966c6890602401600060405180830381600087803b158015614ecf57600080fd5b505af1158015614ee3573d6000803e3d6000fd5b5050505061357b565b6001600160a01b03831615614f38576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd90606401614e2b565b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018490528216906323b872dd906064016020604051808303816000875af1158015614f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fb19190615d31565b506040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038216906342966c6890602401600060405180830381600087803b15801561500d57600080fd5b505af11580156143e0573d6000803e3d6000fd5b6000818152600183016020526040812054801561510a576000615045600183615d1e565b855490915060009061505990600190615d1e565b90508082146150be57600086600001828154811061507957615079615965565b906000526020600020015490508087600001848154811061509c5761509c615965565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806150cf576150cf615e61565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610aa9565b6000915050610aa9565b5092915050565b60405180604001604052806151586040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001606081525090565b508054600082559060005260206000209081019061158291906151a4565b50805460008255601f01602090049060005260206000209081019061158291905b5b8082111561205157600081556001016151a5565b6000602082840312156151cb57600080fd5b5035919050565b600081518084526020840193506020830160005b8281101561520d5781516001600160a01b03168652602095860195909101906001016151e6565b5093949350505050565b60408152600061522a60408301856151d2565b828103602084015280845180835260208301915060208601925060005b81811015615265578351835260209384019390920191600101615247565b50909695505050505050565b80356001600160a01b038116811461528857600080fd5b919050565b60008083601f84011261529f57600080fd5b50813567ffffffffffffffff8111156152b757600080fd5b6020830191508360208285010111156152cf57600080fd5b9250929050565b6000806000806000608086880312156152ee57600080fd5b6152f786615271565b945061530560208701615271565b935060408601359250606086013567ffffffffffffffff81111561532857600080fd5b6153348882890161528d565b969995985093965092949392505050565b600081518084526020840193506020830160005b8281101561520d5781511515865260209586019590910190600101615359565b60408152600061538c6040830185615345565b90508260208301529392505050565b80356001600160801b038116811461528857600080fd5b6000602082840312156153c457600080fd5b6108b68261539b565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715615407576154076153cd565b60405290565b60008067ffffffffffffffff841115615428576154286153cd565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715615457576154576153cd565b60405283815290508082840185101561546f57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261549857600080fd5b6108b68383356020850161540d565b600080600080600060a086880312156154bf57600080fd5b85359450602086013567ffffffffffffffff8111156154dd57600080fd5b8601601f810188136154ee57600080fd5b6154fd8882356020840161540d565b9450506040860135925060608601359150608086013567ffffffffffffffff81111561552857600080fd5b61553488828901615487565b9150509295509295909350565b80356bffffffffffffffffffffffff8116811461528857600080fd5b60006020828403121561556f57600080fd5b813567ffffffffffffffff81111561558657600080fd5b8201610140818503121561559957600080fd5b6155a16153e3565b8135815260208083013590820152604080830135908201526155c560608301615541565b6060820152608082810135908201526155e060a08301615271565b60a08201526155f160c0830161539b565b60c082015261560260e0830161539b565b60e0820152615614610100830161539b565b61010082015261012082013567ffffffffffffffff81111561563557600080fd5b61564186828501615487565b61012083015250949350505050565b6020815260006108b660208301846151d2565b6000806040838503121561567657600080fd5b50508035926020909101359150565b60006101a0820190508251825260208301511515602083015260408301518051604084015260208101516156c960608501826bffffffffffffffffffffffff169052565b5060408101516001600160a01b03811660808501525060608101516001600160a01b03811660a08501525060808101516001600160a01b03811660c08501525060a081015160e084015260c08101516001600160a01b0381166101008501525060e08101516001600160a01b038116610120850152506101008101516001600160a01b038116610140850152506101208101516001600160a01b0381166101608501525061014001516001600160a01b038116610180840152615114565b6000806040838503121561579a57600080fd5b823591506157aa60208401615271565b90509250929050565b60008083601f8401126157c557600080fd5b50813567ffffffffffffffff8111156157dd57600080fd5b6020830191508360208260051b85010111156152cf57600080fd5b60008060008060008060008060a0898b03121561581457600080fd5b61581d89615271565b975061582b60208a01615271565b9650604089013567ffffffffffffffff81111561584757600080fd5b6158538b828c016157b3565b909750955050606089013567ffffffffffffffff81111561587357600080fd5b61587f8b828c016157b3565b909550935050608089013567ffffffffffffffff81111561589f57600080fd5b6158ab8b828c0161528d565b999c989b5096995094979396929594505050565b6000602082840312156158d157600080fd5b6108b682615271565b6020815260006108b66020830184615345565b60008060008060008060a0878903121561590657600080fd5b61590f87615271565b955061591d60208801615271565b94506040870135935060608701359250608087013567ffffffffffffffff81111561594757600080fd5b61595389828a0161528d565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561599657818101518382015260200161597e565b50506000910152565b600082516159b181846020870161597b565b9190910192915050565b82815260406020820152600082518060408401526159e081606085016020870161597b565b601f01601f1916919091016060019392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610aa957610aa96159f5565b6001815b6001841115615a5957808504811115615a3d57615a3d6159f5565b6001841615615a4b57908102905b60019390931c928002615a22565b935093915050565b600082615a7057506001610aa9565b81615a7d57506000610aa9565b8160018114615a935760028114615a9d57615ab9565b6001915050610aa9565b60ff841115615aae57615aae6159f5565b50506001821b610aa9565b5060208310610133831016604e8410600b8410161715615adc575081810a610aa9565b615ae96000198484615a1e565b8060001904821115615afd57615afd6159f5565b029392505050565b60006108b68383615a61565b8082028115828204841417610aa957610aa96159f5565b60006000198203615b3b57615b3b6159f5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60006bffffffffffffffffffffffff831680615b7657615b76615b42565b806bffffffffffffffffffffffff84160691505092915050565b60006001600160801b03831680615ba957615ba9615b42565b806001600160801b0384160691505092915050565b600181811c90821680615bd257607f821691505b602082108103615bf257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b9757806000526020600020601f840160051c81016020851015615c1f5750805b601f840160051c820191505b8181101561357b5760008155600101615c2b565b815167ffffffffffffffff811115615c5957615c596153cd565b615c6d81615c678454615bbe565b84615bf8565b6020601f821160018114615ca15760008315615c895750848201515b600019600385901b1c1916600184901b17845561357b565b600084815260208120601f198516915b82811015615cd15787850151825560209485019460019092019101615cb1565b5084821015615cef5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b8181036000831280158383131683831282161715615114576151146159f5565b81810381811115610aa957610aa96159f5565b600060208284031215615d4357600080fd5b815180151581146108b657600080fd5b634e487b7160e01b600052602160045260246000fd5b60006108b660ff841683615a61565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615da057600080fd5b5051919050565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a060808201526000808354615de381615bbe565b8060a08601526001821660008114615e025760018114615e1e57615e52565b60ff19831660c087015260c082151560051b8701019350615e52565b86600052602060002060005b83811015615e4957815488820160c00152600190910190602001615e2a565b870160c0019450505b50919998505050505050505050565b634e487b7160e01b600052603160045260246000fdfeaa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c747a26469706673582212202babdc5c1cea3ac96907eb3bec40f37264a659e1781b9a9a81cc3b37e057b1e364736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638d3b80b3116100f7578063b881cffe11610095578063cca84a0c11610064578063cca84a0c146105a2578063de838048146105c2578063f23a6e61146105ef578063f72ea4671461060f57600080fd5b8063b881cffe14610522578063bab0ac0314610542578063bc197c8114610562578063bfa640361461058257600080fd5b80639a214b1e116100d15780639a214b1e146104a2578063aee5f34a146104c2578063b0e8bc35146104e2578063b55991c01461050257600080fd5b80638d3b80b3146104425780638eed01f8146104625780639637460e1461048257600080fd5b80633f663d241161016f57806358759df71161013e57806358759df7146103c057806369958ab9146103e0578063730b8381146104005780637f4e48491461042057600080fd5b80633f663d24146103335780633feef58a146103535780634024ba7514610373578063460e20491461039357600080fd5b80633528dff7116101ab5780633528dff71461029257806337eb5109146102c057806338abc5a2146102ee578063392b749c1461030357600080fd5b806304527d90146101d25780630479130914610209578063150b7a0214610241575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046151b9565b61062f565b604051610200929190615217565b60405180910390f35b34801561021557600080fd5b506102296102243660046151b9565b610644565b6040516001600160a01b039091168152602001610200565b34801561024d57600080fd5b5061026161025c3660046152d6565b610662565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610200565b34801561029e57600080fd5b506102b26102ad3660046151b9565b6106b0565b604051610200929190615379565b3480156102cc57600080fd5b506102e06102db3660046153b2565b6107c8565b604051908152602001610200565b6103016102fc3660046154a7565b6108bd565b005b34801561030f57600080fd5b5061032361031e3660046151b9565b610a9e565b6040519015158152602001610200565b34801561033f57600080fd5b5061030161034e36600461555d565b610aaf565b34801561035f57600080fd5b5061030161036e3660046151b9565b610b9c565b34801561037f57600080fd5b5061032361038e3660046151b9565b610c32565b34801561039f57600080fd5b506103b36103ae3660046151b9565b610c3d565b6040516102009190615650565b3480156103cc57600080fd5b506103236103db3660046151b9565b610c48565b3480156103ec57600080fd5b506103016103fb3660046151b9565b610c53565b34801561040c57600080fd5b5061030161041b366004615663565b610d1d565b34801561042c57600080fd5b50610435610d74565b6040516102009190615685565b34801561044e57600080fd5b5061032361045d366004615787565b610ece565b34801561046e57600080fd5b5061032361047d3660046151b9565b610f09565b34801561048e57600080fd5b5061032361049d3660046151b9565b610f14565b3480156104ae57600080fd5b506102e06104bd3660046151b9565b610f3b565b3480156104ce57600080fd5b506102296104dd3660046151b9565b610f4d565b3480156104ee57600080fd5b506103016104fd366004615663565b610f6b565b34801561050e57600080fd5b506102e061051d3660046151b9565b611158565b34801561052e57600080fd5b5061032361053d3660046151b9565b61117c565b34801561054e57600080fd5b5061032361055d366004615787565b611187565b34801561056e57600080fd5b5061026161057d3660046157f8565b6111c2565b34801561058e57600080fd5b506102e061059d3660046158bf565b611213565b3480156105ae57600080fd5b506103016105bd3660046151b9565b611250565b3480156105ce57600080fd5b506105e26105dd3660046151b9565b6112a3565b60405161020091906158da565b3480156105fb57600080fd5b5061026161060a3660046158ed565b611394565b34801561061b57600080fd5b5061022961062a3660046151b9565b6113e3565b60608061063b83611410565b91509150915091565b600061064f826114fb565b601101546001600160a01b031692915050565b600061066c611521565b306001600160a01b038716036106a357507f150b7a02000000000000000000000000000000000000000000000000000000006106a7565b5060005b95945050505050565b60606000806106da846000908152600080516020615e788339815191526020526040902060080190565b905060006106e785611585565b90506000815167ffffffffffffffff811115610705576107056153cd565b60405190808252806020026020018201604052801561072e578160200160208202803683370190505b50905060005b82518110156107b55783600701600084838151811061075557610755615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1682828151811061079d5761079d615965565b91151560209283029190910190910152600101610734565b5080836009015494509450505050915091565b6000806107d36115b4565b604080516060808201835283548252600184015460ff1615156020808401919091528351610160810185526002860154815260038601546bffffffffffffffffffffffff8116928201929092526c010000000000000000000000009091046001600160a01b03908116828601526004860154811692820192909252600585015482166080820152600685015460a08201526007850154821660c08201526008850154821660e082015260098501548216610100820152600a8501548216610120820152600b909401541661014084015290810182905291506108b69084906115dd565b9392505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff16156109355760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f74207061737321000000000000000060448201526064015b60405180910390fd5b805460ff1916600117815542831161098f5760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520646561646c696e652068617320706173736564000000604482015260640161092c565b6000610a337fd3bd306206eb750ea9d44d832310282e4267987d2f047c29fc09232a1e8005e633898888886040516020016109ca919061599f565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e00160405160208183030381529060405280519060200120611609565b9050610a4187338884611651565b610a4a8761175c565b336001600160a01b0316877f82b857b30a7678f4bcb524e2a7f621e7140b3a452ea8c5c56331c6b5dcba44888786604051610a869291906159bb565b60405180910390a350805460ff191690555050505050565b6000610aa9826117c1565b92915050565b610ab7611521565b6000610ac16115b4565b9050600060405180610180016040528083600001546001610ae29190615a0b565b815260200184600001518152602001336001600160a01b031681526020018460200151815260200184604001518152602001846080015181526020018460a001516001600160a01b0316815260200184606001516bffffffffffffffffffffffff1681526020018460c001516001600160801b031681526020018460e001516001600160801b031681526020018461010001516001600160801b031681526020018461012001518152509050610b978161181e565b505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff1615610c0f5760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff19166001178155610c27823361191661195a565b805460ff1916905550565b6000610aa982611972565b6060610aa982611585565b6000610aa9826119e3565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff1615610cc65760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff19166001178155610cdb8233611afb565b610ce782611916611b71565b60405182907f71f4c9aec1b2c51302bcaf09a3f4985709759853536445493905081899603a2190600090a2805460ff1916905550565b610d2682611bc0565b610d2f82611c1d565b6000610d3a836114fb565b6009810183905560405190915083907f50ad08f58a27f2851d7e3a1b3a6a46b290f2ce677e99642d30ff639721e7779090600090a2505050565b610de76040805160608082018352600080835260208084018290528451610160810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152909182015290565b6000610df16115b4565b604080516060808201835283548252600184015460ff1615156020808401919091528351610160810185526002860154815260038601546bffffffffffffffffffffffff8116928201929092526c010000000000000000000000009091046001600160a01b03908116828601526004860154811692820192909252600585015482166080820152600685015460a08201526007850154821660c08201526008850154821660e082015260098501548216610100820152600a8501548216610120820152600b90940154166101408401529081019190915292915050565b6000828152600080516020615e78833981519152602090815260408083206001600160a01b0385168452600f0190915281205460ff166108b6565b6000610aa982611cd4565b6000818152600080516020615e78833981519152602052604081206014015460ff16610aa9565b6000610f46826114fb565b5492915050565b6000610f58826114fb565b600301546001600160a01b031692915050565b80600003610fbb5760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f742073706563696679207a65726f206578697420616d6f756e7400604482015260640161092c565b6000610fc56115b4565b60048101546007820154600683015492935060028401926001600160a01b039283169290911690600090610ffa908890615b05565b84546110069190615b11565b6110109087615b11565b6040517ff5298aca00000000000000000000000000000000000000000000000000000000815233600482015260248101899052604481018890529091506001600160a01b0384169063f5298aca90606401600060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b50506040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b03851692506340c10f199150604401600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b5050604080518a8152602081018a90529081018490523392507f21e56d8662c78d8f3e594a1e36359dddfa7296f292849962ce1f75a663938cc9915060600160405180910390a250505050505050565b6000818152600080516020615e788339815191526020526040812060080154610aa9565b6000610aa982611d1d565b6000828152600080516020615e78833981519152602090815260408083206001600160a01b038516845260100190915281205460ff166108b6565b60006111cc611521565b306001600160a01b038a160361120357507fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621611207565b5060005b98975050505050505050565b6001600160a01b03811660009081527faa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c7486020526040812054610aa9565b61125981611bc0565b6112638133611afb565b61126c81611d58565b61127581611e43565b60405181907f5da9fef10786347975dd7cc4fc53417cff6969b0f7a9b6763169306c8cbeb63690600090a250565b606060006112b0836114fb565b905060006112bd84611585565b90506000815167ffffffffffffffff8111156112db576112db6153cd565b604051908082528060200260200182016040528015611304578160200160208202803683370190505b50905060005b825181101561138b5783601001600084838151811061132b5761132b615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1682828151811061137357611373615965565b9115156020928302919091019091015260010161130a565b50949350505050565b600061139e611521565b306001600160a01b038816036113d557507ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf976113d9565b5060005b9695505050505050565b6000818152600080516020615e7883398151915260205260408120600601546001600160a01b0316610aa9565b606080600061141e84611585565b90506000815167ffffffffffffffff81111561143c5761143c6153cd565b604051908082528060200260200182016040528015611465578160200160208202803683370190505b50905060005b82518110156114f0576114cb8684838151811061148a5761148a615965565b60200260200101516000918252600080516020615e78833981519152602090815260408084206001600160a01b039390931684526013909201905290205490565b8282815181106114dd576114dd615965565b602090810291909101015260010161146b565b509094909350915050565b6000818152600080516020615e78833981519152602052604081206007015481906108b6565b600061152b6115b4565b600181015490915060ff166115825760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79496e697469616c697a65640000000000000000000000000000000000604482015260640161092c565b50565b6000818152600080516020615e788339815191526020526040902060609060088101906108b690600d01611ebc565b6000807fa12d076190200dcdcbe467d038e4860de98e28ac6ff33e86413a723b4ebb26be610aa9565b60006108b6826000015183602001516bffffffffffffffffffffffff16856001600160801b0316611ec9565b6000610aa9611616611f84565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b61165a84611bc0565b6116648484612055565b61166e848461209c565b600061167a8284612286565b9050806001600160a01b03166116b5866000908152600080516020615e7883398151915260205260409020600601546001600160a01b031690565b6001600160a01b031614829061175457604080517fc85d473600000000000000000000000000000000000000000000000000000000815260048101929092526024820152602760448201527f4c696252616e6b6966793a3a6a6f696e47616d652d3e696e76616c696420736960648201527f676e617475726500000000000000000000000000000000000000000000000000608482015260a40161092c565b505050505050565b60006117b18260408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b90506117bd81336122b0565b5050565b6000818152600080516020615e7883398151915260208190526040822060018101546008820192916117f590600d01612330565b148061180557506118058461233a565b15611814575060019392505050565b5060009392505050565b7f490744b35bb5c4ef4fe6db5e9bd248361ef1300fccf80ca351b310c51dd62d8a805460ff16156118915760405162461bcd60e51b815260206004820152601860248201527f5245473a20596f75207368616c6c206e6f742070617373210000000000000000604482015260640161092c565b805460ff191660011781556118a5826123fc565b6118ad61511b565b82516118b99082612bd9565b602083015160c0840151845160405133926001600160a01b0316917f48f48f6273652830aa3718ca489b3d13c244a7215c70bab5c5c2f523aba583b69161190291815260200190565b60405180910390a450805460ff1916905550565b6119208282613015565b6040516001600160a01b0382169083907fb2bd643202385c64d9814c6c3fa61b1ba098d6652292e9d9a6f1a0cdae6eb82490600090a35050565b6119648383613076565b610b9783838363ffffffff16565b6000818152600080516020615e78833981519152602081905260408220600a8101546008909101919083036119ab575060009392505050565b6000848152602082905260409020600301546119c79042615a0b565b8260020154106119d85760006119db565b60015b949350505050565b6000818152600080516020615e7883398151915260205260408120600c81015460089091019060ff161580611a1c5750611a1c83611cd4565b15611a2a5750600092915050565b600080611a3983600501611ebc565b905060005b8151811015611ae957836008016000838381518110611a5f57611a5f615965565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff168015611ace5750836007016000838381518110611aa557611aa5615965565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15611ae15782611add81615b28565b9350505b600101611a3e565b508115806106a757506106a7856130ca565b611b0482611bc0565b6000611b0f836114fb565b60038101549091506001600160a01b03838116911614610b975760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f72000000000000000000000000000000604482015260640161092c565b6000611b7c83611585565b905060005b8151811015611bb657611bae84838381518110611ba057611ba0615965565b60200260200101518561195a565b600101611b81565b50610b978361312f565b611bc8611521565b611bd181613322565b6115825760405162461bcd60e51b815260206004820152600e60248201527f67616d65206e6f7420666f756e64000000000000000000000000000000000000604482015260640161092c565b6000818152600080516020615e78833981519152602081905260409091206001810154600882019291611c5290600d01612330565b1480611c7d57506000838152602082905260409020600301546002830154611c7a9190615a0b565b42115b611cc95760405162461bcd60e51b815260206004820152601d60248201527f737461727447616d652d3e4e6f7420656e6f75676820706c6179657273000000604482015260640161092c565b610b97838383613362565b6000818152600080516020615e7883398151915260208190526040822060048101546008909101805490911080156118055750600c81015460ff16611814575060019392505050565b6000818152600080516020615e7883398151915260208190526040822060048101546008909101805490919003611814575060019392505050565b611d6181611972565b15611dd45760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420646f207768656e20726567697374726174696f6e206973206f60448201527f70656e0000000000000000000000000000000000000000000000000000000000606482015260840161092c565b6000818152600080516020615e7883398151915260205260409020600c015460ff16156115825760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420646f207768656e2067616d6520737461727465640000000000604482015260640161092c565b611e4c81613322565b611e985760405162461bcd60e51b815260206004820152600e60248201527f67616d65206e6f7420666f756e64000000000000000000000000000000000000604482015260640161092c565b6000908152600080516020615e788339815191526020526040902042600a90910155565b606060006108b683613582565b6000838302816000198587098281108382030391505080600003611f0057838281611ef657611ef6615b42565b04925050506108b6565b808411611f1757611f1760038515026011186135de565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b7fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a9546000907fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a7906001600160a01b031630148015611fe55750806001015446145b15611ff05754919050565b61204b8160050154826003015483600401546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b91505090565b5090565b600061205f6115b4565b9050600061206c846114fb565b905060018160000154111561209657805460048301546120969185916001600160a01b03166135f0565b50505050565b6000828152600080516020615e788339815191526020819052604090912060088101906120c885613322565b6121145760405162461bcd60e51b815260206004820152601760248201527f616464506c617965722d3e696e76616c69642067616d65000000000000000000604482015260640161092c565b6001600160a01b03841660009081526001840160205260409020541561217c5760405162461bcd60e51b815260206004820152601960248201527f616464506c617965722d3e506c6179657220696e2067616d6500000000000000604482015260640161092c565b806001015461218d83600501612330565b106121da5760405162461bcd60e51b815260206004820152601560248201527f616464506c617965722d3e70617274792066756c6c0000000000000000000000604482015260640161092c565b6121e38561367c565b61222f5760405162461bcd60e51b815260206004820152601860248201527f616464506c617965722d3e63616e74206a6f696e206e6f770000000000000000604482015260640161092c565b61223c60058301856136c9565b50506001600160a01b0390921660009081526007830160209081526040808320805460ff199081169091556008909501825280832080549095169094556001929092019091522055565b60008060008061229686866136de565b9250925092506122a6828261372b565b5090949350505050565b600c82015460ff166123045760405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f74206578697374000000000000000000604482015260640161092c565b61231282823030303061382f565b60018260080160008282546123279190615a0b565b90915550505050565b6000610aa9825490565b6000818152600080516020615e78833981519152602081905260408220600c8101546008909101919060ff1615612375575060009392505050565b816002015460000361238b575060009392505050565b8360000361239d575060009392505050565b60008481526020829052604090206003015460028301546123be9190615a0b565b42116123ce575060009392505050565b6000848152602082905260409020600201546123ec60058401612330565b10156119d8575060009392505050565b612404611521565b600061240e6115b4565b60e0830151600382015460029092019250612436916bffffffffffffffffffffffff16615b58565b600182015460e08401516bffffffffffffffffffffffff918216929091161561248a5760405163b61659cd60e01b81526bffffffffffffffffffffffff92831660048201529116602482015260440161092c565b505060e082015160018201546124ae91906bffffffffffffffffffffffff16615b58565b60018201546101008401516bffffffffffffffffffffffff918216929091161561250a5760405163b61659cd60e01b81526bffffffffffffffffffffffff90921660048301526001600160801b0316602482015260440161092c565b50508160e001516bffffffffffffffffffffffff1682610100015161252f9190615b90565b60e083015161010084015190916001600160801b0316156125825760405163b61659cd60e01b81526bffffffffffffffffffffffff90921660048301526001600160801b0316602482015260440161092c565b505060008261010001516001600160801b0316116126085760405162461bcd60e51b815260206004820152602760248201527f4c696252616e6b6966793a3a6e657747616d652d3e4d696e2067616d6520746960448201527f6d65207a65726f00000000000000000000000000000000000000000000000000606482015260840161092c565b60e082015160026bffffffffffffffffffffffff821611612666576040517f534985a70000000000000000000000000000000000000000000000000000000081526bffffffffffffffffffffffff909116600482015260240161092c565b5060006040518061010001604052808461012001516001600160801b0316815260200184608001518152602001846060015181526020018461014001516001600160801b031681526020018460e001516bffffffffffffffffffffffff1681526020018460a0015181526020018460c001516001600160a01b031681526020016000801b815250905060006126f96115b4565b84519091506127089083613b5f565b600061271785600001516114fb565b905061272b8560a001518660800151613cb4565b8051600a8301556020810151600b83015560400151600c820155610160850151600182019061275a9082615c3f565b506001840154612779906bffffffffffffffffffffffff166010615b11565b60018501546101008701516127b7916127ab916bffffffffffffffffffffffff909116906001600160801b0316615cfe565b60ff81901d9081011890565b106128045760405162461bcd60e51b815260206004820152601b60248201527f4d696e2067616d652074696d65206f7574206f6620626f756e64730000000000604482015260640161092c565b84606001518460040154111561285c5760405162461bcd60e51b815260206004820152601860248201527f4d696e20706c6179657220636f756e7420746f6f206c6f770000000000000000604482015260640161092c565b6101008086015160408051610160810182528754815260018801546bffffffffffffffffffffffff811660208301526001600160a01b036c01000000000000000000000000909104811692820192909252600288015482166060820152600388015482166080820152600488015460a08201526005880154821660c08201526006880154821660e082015260078801548216938101939093526008870154811661012084015260098701541661014083015260009161291b91906115dd565b9050600061292c826009600a611ec9565b9050600061293a8284615d1e565b6003880154600189015460408b81015190517f79cc67900000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101879052939450918216926c01000000000000000000000000909104909116906379cc679090604401600060405180830381600087803b1580156129c557600080fd5b505af11580156129d9573d6000803e3d6000fd5b50505050600188015460408a81015190516323b872dd60e01b81526001600160a01b0391821660048201528382166024820152604481018590526c0100000000000000000000000090920416906323b872dd906064016020604051808303816000875af1158015612a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a729190615d31565b508860200151600003612ab1576040517fc7fa2ae200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604089015160038601805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905585546001908790600090612af9908490615a0b565b909155505060208901518086556101008a01516001600160801b0316600287015560048701546001600160a01b031690819063731133e9903090600190612b409082615a0b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091526044820152608060648201526000608482015260a4015b600060405180830381600087803b158015612bb557600080fd5b505af1158015612bc9573d6000803e3d6000fd5b5050505050505050505050505050565b6000612c2e8360408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b9050806008015460001480612c59575080600701548160060154612c529190615a0b565b8160080154145b612ccb5760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206d757461746520706f736974696f6e2077697468206375727260448201527f656e746c7920706f7369746976652062616c616e636500000000000000000000606482015260840161092c565b815180516001830155602081015160028301556040810151600383015560608101516004830155608001516005820155612d09600a82016000615165565b612d17600b82016000615165565b612d25600982016000615183565b60005b8260200151518110156130025781600a0183602001518281518110612d4f57612d4f615965565b602090810291909101810151518254600181018455600093845292829020909201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909316929092179091558301518051600b8401919083908110612db657612db6615965565b602090810291909101810151810151825460018101845560009384529282902090920191909155830151805160098401919083908110612df857612df8615965565b60209081029190910181015160400151825460018101845560009384529282902091830490910180549192909160ff601f9092166101000a918202191690836002811115612e4857612e48615d53565b021790555082602001518181518110612e6357612e63615965565b60200260200101516060015182600001600085602001518481518110612e8b57612e8b615965565b6020026020010151604001516002811115612ea857612ea8615d53565b6002811115612eb957612eb9615d53565b8152602001908152602001600020600085602001518481518110612edf57612edf615965565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600085602001518481518110612f2357612f23615965565b60209081029190910181015181015182528101919091526040016000208151805182908190612f529082615c3f565b50602091820151600190910155820151805160028301908190612f759082615c3f565b50602091909101516001909101556040820151805160048301908190612f9b9082615c3f565b50602091909101516001909101556060820151805160068301908190612fc19082615c3f565b50602091909101516001909101556080820151805160088301908190612fe79082615c3f565b50602082015181600101555050905050806001019050612d28565b50600c01805460ff191660011790555050565b600061306a8360408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b9050610b978183613e49565b61307f82611bc0565b6130898282613ed2565b60006130936115b4565b905060006130a0846114fb565b905060018160000154111561209657805460048301546120969185916001600160a01b0316614048565b6000806130d6836140a0565b6000848152600080516020615e7883398151915260205260409020600c8101549192506008019060ff161580613110575061311084611cd4565b1561311f575060009392505050565b8115611814575060019392505050565b6000818152600080516020615e7883398151915260208190526040822090919061315b90600d01611ebc565b905060005b815181101561329a5760008481526020849052604081208351601390910190829085908590811061319357613193615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600083600001600086815260200190815260200160002060080160070160008484815181106131f0576131f0615965565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506000836000016000868152602001908152602001600020600801600801600084848151811061326057613260615965565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101613160565b50600083815260208390526040812060088101829055600c8101805461ffff1916905560148101805460ff191690556132d891601590910190615165565b600083815260208390526040812060118101829055600d019081816132fd8282615165565b5050506000938452505060205260408120600a81018290556009810182905560120155565b6000818152600080516020615e788339815191526020526040812060068101546001600160a01b0316156133595750600192915050565b50600092915050565b600482015460ff16156133b75760405162461bcd60e51b815260206004820152601a60248201527f737461727447616d652d3e616c72656164792073746172746564000000000000604482015260640161092c565b81600201546000036134315760405162461bcd60e51b815260206004820152602d60248201527f737461727447616d652d3e47616d6520726567697374726174696f6e2077617360448201527f206e6f7420796574206f70656e00000000000000000000000000000000000000606482015260840161092c565b826000036134815760405162461bcd60e51b815260206004820152601960248201527f737461727447616d652d3e47616d65206e6f7420666f756e6400000000000000604482015260640161092c565b60008381526020829052604090206002015461349f60058401612330565b10156134ed5760405162461bcd60e51b815260206004820152601d60248201527f737461727447616d652d3e4e6f7420656e6f75676820706c6179657273000000604482015260640161092c565b60048201805461ffff1916600190811790915580835542908301819055600383015561351882614116565b600061352683600501612330565b600a8401819055905060005b8181101561357b5760006135496005860183614172565b6001600160a01b031660009081526008860160205260409020805460ff19166001908117909155919091019050613532565b5050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156135d257602002820191906000526020600020905b8154815260200190600101908083116135be575b50505050509050919050565b634e487b71600052806020526024601cfd5b6040517fe2ab691d0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282919082169063e2ab691d906064015b600060405180830381600087803b15801561365e57600080fd5b505af1158015613672573d6000803e3d6000fd5b5050505050505050565b6000818152600080516020615e7883398151915260205260408120600c81015460089091019060ff16806136b257506002810154155b156136c05750600092915050565b50600192915050565b60006108b6836001600160a01b03841661417e565b600080600083516041036137185760208401516040850151606086015160001a61370a888285856141cd565b955095509550505050613724565b50508151600091506002905b9250925092565b600082600381111561373f5761373f615d53565b03613748575050565b600182600381111561375c5761375c615d53565b03613793576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156137a7576137a7615d53565b036137e1576040517ffce698f70000000000000000000000000000000000000000000000000000000081526004810182905260240161092c565b60038260038111156137f5576137f5615d53565b036117bd576040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004810182905260240161092c565b306001600160a01b03861603613958576002860154156138845760028601546040516001600160a01b0383169180156108fc02916000818181858888f19350505050158015613882573d6000803e3d6000fd5b505b6004860154156138c95760048601546040516001600160a01b0386169180156108fc02916000818181858888f193505050501580156138c7573d6000803e3d6000fd5b505b60058601541561390e5760058601546040516001600160a01b0385169180156108fc02916000818181858888f1935050505015801561390c573d6000803e3d6000fd5b505b6003860154156139535760038601546040516001600160a01b0384169180156108fc02916000818181858888f19350505050158015613951573d6000803e3d6000fd5b505b6139e2565b6003860154600587015460048801546002890154600093929161397a91615a0b565b6139849190615a0b565b61398e9190615a0b565b9050803410156139e05760405162461bcd60e51b815260206004820152601160248201527f6d73672e76616c756520746f6f206c6f77000000000000000000000000000000604482015260640161092c565b505b60005b600a870154811015613b5657600087600a018281548110613a0857613a08615965565b6000918252602082200154600b8a0180546001600160a01b0390921693509084908110613a3757613a37615965565b906000526020600020015490506000896009018481548110613a5b57613a5b615965565b60009182526020808320908204015460ff601f9092166101000a90041691508a81836002811115613a8e57613a8e615d53565b6002811115613a9f57613a9f615d53565b8152602080820192909252604090810160009081206001600160a01b0388168252835281812086825290925281209150826002811115613ae157613ae1615d53565b03613afa57613af584828c8c8c8c8c61429c565b613b47565b6002826002811115613b0e57613b0e615d53565b03613b1e57613af584828c6143eb565b6001826002811115613b3257613b32615d53565b03613b4757613b478484838d8d8d8d8d614568565b505050508060010190506139e5565b50505050505050565b613b6882613322565b15613bb55760405162461bcd60e51b815260206004820152601a60248201527f63726561746547616d652d3e416c726561647920657869737473000000000000604482015260640161092c565b81600003613c055760405162461bcd60e51b815260206004820152601260248201527f63726561746547616d652d3e67616d6549640000000000000000000000000000604482015260640161092c565b613c0f82826148a7565b7faa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c7498054600080516020615e7883398151915291600191600090613c53908490615a0b565b90915550506002810154604080516020810186905290810191909152600080516020615e78833981519152606082015260800160408051601f1981840301815291815281516020928301206000958652929091529092206007019190915550565b613cd860405180606001604052806000815260200160008152602001600081525090565b613cfc60405180606001604052806000815260200160008152602001600081525090565b613d0584614c16565b60208201526000805b6002828460200151613d209190615d1e565b613d2a9190615d69565b613d349082615a0b565b905081613d4081615b28565b925050858110613d0e57858114613dbf5760405162461bcd60e51b815260206004820152603460248201527f717561647261746963566f74696e674572726f723a20766f746543726564697460448201527f73206d75737420626520695e3220736572696573000000000000000000000000606482015260840161092c565b60408301829052818511613e3d576040805162461bcd60e51b81526020600482015260248101919091527f717561647261746963566f74696e674572726f723a204d696e696d756d20566f60448201527f74696e6720706f736974696f6e732061626f7665206d696e20706c6179657273606482015260840161092c565b50509283525090919050565b816008015482600701548360060154613e629190615a0b565b10613eaf5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f7567682062616c616e636520746f20726566756e6400000000604482015260640161092c565b613ebd82308384858661382f565b60018260060160008282546123279190615a0b565b6000828152600080516020615e7883398151915260208190526040909120600801613efc84613322565b613f485760405162461bcd60e51b815260206004820152601360248201527f67616d6520646f6573206e6f7420657869737400000000000000000000000000604482015260640161092c565b6001600160a01b03831660009081526001830160205260409020548414613fb15760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696e207468652067616d650000000000000000000000000000000000604482015260640161092c565b600481015460ff161580613fd45750600481015460ff6101009091041615156001145b6140205760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f74206c65617665206f6e6365207374617274656400000000000000604482015260640161092c565b6001600160a01b038316600090815260018301602052604081205561357b6005820184614d7c565b6040517fb5674c680000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282919082169063b5674c6890606401613644565b6000818152600080516020615e788339815191526020819052604082206008018383036140cf576140cf615d78565b600481015460ff1615156001146140e8576140e8615d78565b60018101546000858152602084905260409020546141069190615a0b565b42116119d8575060009392505050565b60005b61412582600501612330565b8110156117bd57600061413b6005840183614172565b6001600160a01b031660009081526007840160209081526040808320805460ff19169055600b860190915281205550600101614119565b60006108b68383614d91565b60008181526001830160205260408120546141c557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aa9565b506000610aa9565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156142085750600091506003905082614292565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561425c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661428857506000925060019150829050614292565b9250600091508190505b9450945094915050565b6142af8786838960020160010154614dbb565b6142c28786848960040160010154614dbb565b6142d58786868960060160010154614dbb565b6142e88786858960080160010154614dbb565b60018601548790801580159061430757506001600160a01b0387163014155b156143e0576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528291908416906370a0823190602401602060405180830381865afa15801561436e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143929190615d8e565b10156143e05760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820657263323020746f6b656e73000000000000000000604482015260640161092c565b505050505050505050565b6003820154839015801561440157506005830154155b801561440f57506007830154155b801561441d57506009830154155b6144695760405162461bcd60e51b815260206004820152601e60248201527f455243373231207472616e7366657273206e6f7420737570706f727465640000604482015260640161092c565b60018301541580159061448557506001600160a01b0382163014155b15612096576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600091908316906370a0823190602401602060405180830381865afa1580156144ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145119190615d8e565b600185015490915081101561357b5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f756768204552433732312062616c616e636500000000000000604482015260640161092c565b600186015488908015614655576040517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018b90526000919084169062fdd58e90604401602060405180830381865afa1580156145dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146019190615d8e565b9050818110156146535760405162461bcd60e51b815260206004820152601c60248201527f455243313135352062616c616e6365206973206e6f742076616c696400000000604482015260640161092c565b505b50600787015480156146ce57816001600160a01b031663f242432a88888c858d6006016000016040518663ffffffff1660e01b815260040161469b959493929190615da7565b600060405180830381600087803b1580156146b557600080fd5b505af11580156146c9573d6000803e3d6000fd5b505050505b506009870154801561474757816001600160a01b031663f242432a88878c858d6008016000016040518663ffffffff1660e01b8152600401614714959493929190615da7565b600060405180830381600087803b15801561472e57600080fd5b505af1158015614742573d6000803e3d6000fd5b505050505b5060058701548015614855576001600160a01b0384166147e8576040517ff5298aca0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018b90526044820183905283169063f5298aca90606401600060405180830381600087803b1580156147cb57600080fd5b505af11580156147df573d6000803e3d6000fd5b50505050614855565b816001600160a01b031663f242432a88868c858d6004016000016040518663ffffffff1660e01b8152600401614822959493929190615da7565b600060405180830381600087803b15801561483c57600080fd5b505af1158015614850573d6000803e3d6000fd5b505050505b506003870154801561489b57816001600160a01b031663f242432a88858c858d6002016000016040518663ffffffff1660e01b8152600401612b9b959493929190615da7565b50505050505050505050565b6000828152600080516020615e78833981519152602081905260408220835191929091900361493f576040516320ddb3bf60e11b815260206004820152602260248201527f4c69625442473a3a696e69742d3e73657474696e67732e74696d65506572547560448201527f726e000000000000000000000000000000000000000000000000000000000000606482015260840161092c565b82602001516000036149ba576040516320ddb3bf60e11b815260206004820152602360248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d6178506c6179657260448201527f436e740000000000000000000000000000000000000000000000000000000000606482015260840161092c565b6001836040015111614a35576040516320ddb3bf60e11b815260206004820152602360248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d696e506c6179657260448201527f436e740000000000000000000000000000000000000000000000000000000000606482015260840161092c565b8260800151600003614a8a576040516320ddb3bf60e11b815260206004820152601f60248201527f4c69625442473a3a696e69742d3e73657474696e67732e6d61785475726e7300604482015260640161092c565b8260600151600003614adf576040516320ddb3bf60e11b815260206004820152601860248201527f4c69625442473a3a696e69742d3e74696d65546f4a6f696e0000000000000000604482015260640161092c565b8260200151816002015410614b37576040516320ddb3bf60e11b815260206004820152601a60248201527f4c69625442473a3a696e69742d3e6d6178506c61796572436e74000000000000604482015260640161092c565b60c08301516001600160a01b0316614b92576040516320ddb3bf60e11b815260206004820152601860248201527f4c69625442473a3a696e69742d3e67616d654d61737465720000000000000000604482015260640161092c565b506000928352602090815260409283902082518155908201516001820155918101516002830155606081015160038301556080810151600483015560a0810151600583015560c081015160068301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560e00151600790910155565b600060018211614c24575090565b8160017001000000000000000000000000000000008210614c4a5760809190911c9060401b5b680100000000000000008210614c655760409190911c9060201b5b6401000000008210614c7c5760209190911c9060101b5b620100008210614c915760109190911c9060081b5b6101008210614ca55760089190911c9060041b5b60108210614cb85760049190911c9060021b5b60048210614cc45760011b5b600302600190811c90818581614cdc57614cdc615b42565b048201901c90506001818581614cf457614cf4615b42565b048201901c90506001818581614d0c57614d0c615b42565b048201901c90506001818581614d2457614d24615b42565b048201901c90506001818581614d3c57614d3c615b42565b048201901c90506001818581614d5457614d54615b42565b048201901c9050614d73818581614d6d57614d6d615b42565b04821190565b90039392505050565b60006108b6836001600160a01b038416615021565b6000826000018281548110614da857614da8615965565b9060005260206000200154905092915050565b83811561357b57306001600160a01b03851603614eec576001600160a01b03831615614e74576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905282169063a9059cbb906044015b6020604051808303816000875af1158015614e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e6e9190615d31565b5061357b565b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038216906342966c6890602401600060405180830381600087803b158015614ecf57600080fd5b505af1158015614ee3573d6000803e3d6000fd5b5050505061357b565b6001600160a01b03831615614f38576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528216906323b872dd90606401614e2b565b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018490528216906323b872dd906064016020604051808303816000875af1158015614f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fb19190615d31565b506040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038216906342966c6890602401600060405180830381600087803b15801561500d57600080fd5b505af11580156143e0573d6000803e3d6000fd5b6000818152600183016020526040812054801561510a576000615045600183615d1e565b855490915060009061505990600190615d1e565b90508082146150be57600086600001828154811061507957615079615965565b906000526020600020015490508087600001848154811061509c5761509c615965565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806150cf576150cf615e61565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610aa9565b6000915050610aa9565b5092915050565b60405180604001604052806151586040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001606081525090565b508054600082559060005260206000209081019061158291906151a4565b50805460008255601f01602090049060005260206000209081019061158291905b5b8082111561205157600081556001016151a5565b6000602082840312156151cb57600080fd5b5035919050565b600081518084526020840193506020830160005b8281101561520d5781516001600160a01b03168652602095860195909101906001016151e6565b5093949350505050565b60408152600061522a60408301856151d2565b828103602084015280845180835260208301915060208601925060005b81811015615265578351835260209384019390920191600101615247565b50909695505050505050565b80356001600160a01b038116811461528857600080fd5b919050565b60008083601f84011261529f57600080fd5b50813567ffffffffffffffff8111156152b757600080fd5b6020830191508360208285010111156152cf57600080fd5b9250929050565b6000806000806000608086880312156152ee57600080fd5b6152f786615271565b945061530560208701615271565b935060408601359250606086013567ffffffffffffffff81111561532857600080fd5b6153348882890161528d565b969995985093965092949392505050565b600081518084526020840193506020830160005b8281101561520d5781511515865260209586019590910190600101615359565b60408152600061538c6040830185615345565b90508260208301529392505050565b80356001600160801b038116811461528857600080fd5b6000602082840312156153c457600080fd5b6108b68261539b565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715615407576154076153cd565b60405290565b60008067ffffffffffffffff841115615428576154286153cd565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715615457576154576153cd565b60405283815290508082840185101561546f57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261549857600080fd5b6108b68383356020850161540d565b600080600080600060a086880312156154bf57600080fd5b85359450602086013567ffffffffffffffff8111156154dd57600080fd5b8601601f810188136154ee57600080fd5b6154fd8882356020840161540d565b9450506040860135925060608601359150608086013567ffffffffffffffff81111561552857600080fd5b61553488828901615487565b9150509295509295909350565b80356bffffffffffffffffffffffff8116811461528857600080fd5b60006020828403121561556f57600080fd5b813567ffffffffffffffff81111561558657600080fd5b8201610140818503121561559957600080fd5b6155a16153e3565b8135815260208083013590820152604080830135908201526155c560608301615541565b6060820152608082810135908201526155e060a08301615271565b60a08201526155f160c0830161539b565b60c082015261560260e0830161539b565b60e0820152615614610100830161539b565b61010082015261012082013567ffffffffffffffff81111561563557600080fd5b61564186828501615487565b61012083015250949350505050565b6020815260006108b660208301846151d2565b6000806040838503121561567657600080fd5b50508035926020909101359150565b60006101a0820190508251825260208301511515602083015260408301518051604084015260208101516156c960608501826bffffffffffffffffffffffff169052565b5060408101516001600160a01b03811660808501525060608101516001600160a01b03811660a08501525060808101516001600160a01b03811660c08501525060a081015160e084015260c08101516001600160a01b0381166101008501525060e08101516001600160a01b038116610120850152506101008101516001600160a01b038116610140850152506101208101516001600160a01b0381166101608501525061014001516001600160a01b038116610180840152615114565b6000806040838503121561579a57600080fd5b823591506157aa60208401615271565b90509250929050565b60008083601f8401126157c557600080fd5b50813567ffffffffffffffff8111156157dd57600080fd5b6020830191508360208260051b85010111156152cf57600080fd5b60008060008060008060008060a0898b03121561581457600080fd5b61581d89615271565b975061582b60208a01615271565b9650604089013567ffffffffffffffff81111561584757600080fd5b6158538b828c016157b3565b909750955050606089013567ffffffffffffffff81111561587357600080fd5b61587f8b828c016157b3565b909550935050608089013567ffffffffffffffff81111561589f57600080fd5b6158ab8b828c0161528d565b999c989b5096995094979396929594505050565b6000602082840312156158d157600080fd5b6108b682615271565b6020815260006108b66020830184615345565b60008060008060008060a0878903121561590657600080fd5b61590f87615271565b955061591d60208801615271565b94506040870135935060608701359250608087013567ffffffffffffffff81111561594757600080fd5b61595389828a0161528d565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561599657818101518382015260200161597e565b50506000910152565b600082516159b181846020870161597b565b9190910192915050565b82815260406020820152600082518060408401526159e081606085016020870161597b565b601f01601f1916919091016060019392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610aa957610aa96159f5565b6001815b6001841115615a5957808504811115615a3d57615a3d6159f5565b6001841615615a4b57908102905b60019390931c928002615a22565b935093915050565b600082615a7057506001610aa9565b81615a7d57506000610aa9565b8160018114615a935760028114615a9d57615ab9565b6001915050610aa9565b60ff841115615aae57615aae6159f5565b50506001821b610aa9565b5060208310610133831016604e8410600b8410161715615adc575081810a610aa9565b615ae96000198484615a1e565b8060001904821115615afd57615afd6159f5565b029392505050565b60006108b68383615a61565b8082028115828204841417610aa957610aa96159f5565b60006000198203615b3b57615b3b6159f5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60006bffffffffffffffffffffffff831680615b7657615b76615b42565b806bffffffffffffffffffffffff84160691505092915050565b60006001600160801b03831680615ba957615ba9615b42565b806001600160801b0384160691505092915050565b600181811c90821680615bd257607f821691505b602082108103615bf257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b9757806000526020600020601f840160051c81016020851015615c1f5750805b601f840160051c820191505b8181101561357b5760008155600101615c2b565b815167ffffffffffffffff811115615c5957615c596153cd565b615c6d81615c678454615bbe565b84615bf8565b6020601f821160018114615ca15760008315615c895750848201515b600019600385901b1c1916600184901b17845561357b565b600084815260208120601f198516915b82811015615cd15787850151825560209485019460019092019101615cb1565b5084821015615cef5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b8181036000831280158383131683831282161715615114576151146159f5565b81810381811115610aa957610aa96159f5565b600060208284031215615d4357600080fd5b815180151581146108b657600080fd5b634e487b7160e01b600052602160045260246000fd5b60006108b660ff841683615a61565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615da057600080fd5b5051919050565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a060808201526000808354615de381615bbe565b8060a08601526001821660008114615e025760018114615e1e57615e52565b60ff19831660c087015260c082151560051b8701019350615e52565b86600052602060002060005b83811015615e4957815488820160c00152600190910190602001615e2a565b870160c0019450505b50919998505050505050505050565b634e487b7160e01b600052603160045260246000fdfeaa1f1fd6916372407d8e1fff30618f7864d63b564f087227812164c61d47c747a26469706673582212202babdc5c1cea3ac96907eb3bec40f37264a659e1781b9a9a81cc3b37e057b1e364736f6c634300081c0033",
  "devdoc": {
    "author": "Peeramid Labs, 2024",
    "details": "Implements core game functionality, ERC token receivers, and reentrancy protection",
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canEndTurn(uint256)": {
        "details": "Returns whether the turn can be ended early for the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether the turn can be ended early"
        }
      },
      "canStartGame(uint256)": {
        "details": "Returns whether the game with the specified ID can be started early",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether the game can be started early"
        }
      },
      "cancelGame(uint256)": {
        "custom:security": "nonReentrant",
        "details": "Cancels a game with the provided game ID. `gameId` is the ID of the game.",
        "params": {
          "gameId": "The ID of the game."
        }
      },
      "createGame((uint256,uint256,uint256,uint96,uint256,address,uint128,uint128,uint128,string))": {
        "custom:security": "nonReentrant",
        "details": "External function to create a new game",
        "params": {
          "params": "Input parameters for creating a new game"
        }
      },
      "estimateGamePrice(uint128)": {
        "details": "Estimates the price of a game with the specified minimum game time",
        "params": {
          "minGameTime": "The minimum game time"
        },
        "returns": {
          "_0": "uint256 The estimated price of the game"
        }
      },
      "gameCreator(uint256)": {
        "details": "Returns the creator of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "address The creator of the game"
        }
      },
      "gameWinner(uint256)": {
        "details": "Returns the winner of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "address The winner of the game"
        }
      },
      "getContractState()": {
        "details": "Returns the current state of the contract",
        "returns": {
          "_0": "LibRankify.InstanceState The current state of the contract"
        }
      },
      "getGM(uint256)": {
        "details": "Returns the game master of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "address The game master of the game"
        }
      },
      "getGameRank(uint256)": {
        "details": "Returns the rank of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "uint256 The rank of the game"
        }
      },
      "getPlayerVotedArray(uint256)": {
        "details": "Returns the voted array for the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool[] The voted array"
        }
      },
      "getPlayers(uint256)": {
        "details": "Returns the players in the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "address[] The players in the game"
        }
      },
      "getPlayersGame(address)": {
        "details": "Returns the game ID of the game that the specified player is in",
        "params": {
          "player": "The address of the player"
        },
        "returns": {
          "_0": "uint256 The ID of the game"
        }
      },
      "getPlayersMoved(uint256)": {
        "details": "Returns the players who have moved in the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool[] The players who have moved",
          "_1": "uint256 The number of players who have moved"
        }
      },
      "getScores(uint256)": {
        "details": "Returns the scores of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "address[] The players in the game",
          "_1": "uint256[] The scores of the players"
        }
      },
      "getTurn(uint256)": {
        "details": "Returns the current turn of the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "uint256 The current turn of the game"
        }
      },
      "isGameOver(uint256)": {
        "details": "Returns whether the game with the specified ID is over",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether the game is over"
        }
      },
      "isLastTurn(uint256)": {
        "details": "Returns whether the game with the specified ID is in the last turn",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether the game is in the last turn"
        }
      },
      "isOvertime(uint256)": {
        "details": "Returns whether the game with the specified ID is in overtime",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether the game is in overtime"
        }
      },
      "isPlayerTurnComplete(uint256,address)": {
        "details": "Returns whether the player has completed their turn in the game with the specified ID",
        "params": {
          "gameId": "The ID of the game",
          "player": "The address of the player"
        },
        "returns": {
          "_0": "bool Whether the player has completed their turn"
        }
      },
      "isRegistrationOpen(uint256)": {
        "details": "Returns whether registration is open for the game with the specified ID",
        "params": {
          "gameId": "The ID of the game"
        },
        "returns": {
          "_0": "bool Whether registration is open"
        }
      },
      "joinGame(uint256,bytes,bytes32,uint256,string)": {
        "custom:security": "nonReentrant",
        "details": "Allows a player to join a game with the provided game ID. `gameId` is the ID of the game.",
        "params": {
          "deadline": "The deadline for the player to sign the gmCommitment.",
          "gameId": "The ID of the game.",
          "gameMasterSignature": "The ECDSA signature of the game master.",
          "gmCommitment": "The gmCommitment to the player signed by the game master."
        }
      },
      "leaveGame(uint256)": {
        "custom:security": "nonReentrant",
        "details": "Allows a player to leave a game with the provided game ID. `gameId` is the ID of the game.",
        "params": {
          "gameId": "The ID of the game."
        }
      },
      "openRegistration(uint256)": {
        "details": "Opens registration for a game with the provided game ID. `gameId` is the ID of the game.",
        "params": {
          "gameId": "The ID of the game."
        }
      },
      "startGame(uint256,uint256)": {
        "details": "Starts a game with the provided game ID early. `gameId` is the ID of the game.",
        "params": {
          "gameId": "The ID of the game.",
          "permutationCommitment": "The commitment to the permutation issued by the game master."
        }
      }
    },
    "title": "RankifyInstanceMainFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelGame(uint256)": {
        "notice": "This function:         - Calls the `enforceIsGameCreator` function with `msg.sender`.         - Cancels the game.         - Emits a _GameClosed_ event."
      },
      "createGame((uint256,uint256,uint256,uint96,uint256,address,uint128,uint128,uint128,string))": {
        "notice": "This function:         - Validates the contract is initialized         - Processes input parameters         - Creates a new game with specified settings"
      },
      "joinGame(uint256,bytes,bytes32,uint256,string)": {
        "notice": "This function:         - Calls the `joinGame` function with `msg.sender`.         - Calls the `fund` function with `bytes32(gameId)`.         - Emits a _PlayerJoined_ event."
      },
      "leaveGame(uint256)": {
        "notice": "This function:         - Calls the `quitGame` function with `msg.sender`, `true`, and `onPlayerQuit`."
      },
      "openRegistration(uint256)": {
        "notice": "This function:         - Calls the `enforceIsGameCreator` function with `msg.sender`.         - Calls the `enforceIsPreRegistrationStage` function.         - Calls the `openRegistration` function.         - Emits a _RegistrationOpen_ event."
      },
      "startGame(uint256,uint256)": {
        "notice": "This function:         - Calls the `enforceGameExists` function.         - Calls the `startGameEarly` function.         - Emits a _GameStarted_ event."
      }
    },
    "notice": "Main facet for the Rankify protocol that handles game creation and management",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}