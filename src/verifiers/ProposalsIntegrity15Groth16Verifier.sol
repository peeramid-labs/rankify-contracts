// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract ProposalsIntegrity15Groth16Verifier {
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        5545017867962501469197988449758658516673587249205882039362978111522672427226;
    uint256 public constant DELTA_X2 =
        19448423959375750855206127924828311117050960803864574166657530553299956322527;
    uint256 public constant DELTA_Y1 =
        19958333776506118976444527516293428159666713414195208248197128607154362021861;
    uint256 public constant DELTA_Y2 =
        403671295757259186704764527309900141792802274937586198789172578520484956290;

    uint256 public constant IC0_X =
        14683541697182085272970457138834575603889118102403173182441426147372055171199;
    uint256 public constant IC0_Y =
        15828106890827031044303831138464387019076067773474851454594995633341138423973;
    uint256 public constant IC1_X =
        931350454775311225726529939363021547468254698471122619231764441911366897908;
    uint256 public constant IC1_Y =
        4375955915673550592447622878557683110408945548086441385802807586743607712302;
    uint256 public constant IC2_X =
        4114760598395990026979823272982475487591884596696964679643335828714618602991;
    uint256 public constant IC2_Y =
        14139523484594891707796256678098621163124867920341648929872003988045059476018;
    uint256 public constant IC3_X =
        9956948280022397189816553783649025689445249551760227976506924266821723239552;
    uint256 public constant IC3_Y =
        13287125790767565666438571418521403760085210034152132165294814734841926235060;
    uint256 public constant IC4_X =
        9166141991627960620799367532057672092127759484546352794909978440486809735523;
    uint256 public constant IC4_Y =
        15327572766279697528616614806368179837738458096070982027950873188401236281495;
    uint256 public constant IC5_X =
        20794043095447656965147702531595998112836022210976219228257437462103543700857;
    uint256 public constant IC5_Y =
        956170243796799570651284866374958845257187450767403611325425887961597681476;
    uint256 public constant IC6_X =
        11217103035977176112933408563767521671611683513731914281901719441868601760885;
    uint256 public constant IC6_Y =
        16592436117958271930315720460978366363130025536852712554494467139521674698014;
    uint256 public constant IC7_X =
        14582312991638979300934901102128688548034213363481313090134427294682219561316;
    uint256 public constant IC7_Y =
        683412996374558886961490024194718858983010432926411082557023832732459662953;
    uint256 public constant IC8_X =
        4318803171102741537644636603456635806596669507521211218570986664741905765669;
    uint256 public constant IC8_Y =
        16812810236964430307925254807239848743556052644165083205670334488726550399332;
    uint256 public constant IC9_X =
        6106216416162939038859545928641188266403999525369425027112024368111659405961;
    uint256 public constant IC9_Y =
        2430695711414767733369316929614791565561726190803955108913202685023066862603;
    uint256 public constant IC10_X =
        11145471141203367699735152456572699621780407417053628090097541162589141279943;
    uint256 public constant IC10_Y =
        18042667503991844648868638274290770286824772392264358282186759640684724328319;
    uint256 public constant IC11_X =
        11117473557063998024662861187995375408291416968351995634420617374516042047198;
    uint256 public constant IC11_Y =
        4397663347026032908202665099914709771739699822079022317803759720908428670649;
    uint256 public constant IC12_X =
        20685780591523777395032887136039464753737046038308749962370298552072500704817;
    uint256 public constant IC12_Y =
        2930274192323646188099361490870598368472831144445988624285661109486028248172;
    uint256 public constant IC13_X =
        15534642391258460790709232396530076051117027243609969679497395940869713161493;
    uint256 public constant IC13_Y =
        1044856701307702561380786678369528675922138631992119209129557277144160764217;
    uint256 public constant IC14_X =
        19202281176256741786197776710385465162429147615511732052173548508190549142224;
    uint256 public constant IC14_Y =
        12203224860934196875059962608605280059847309415293543672505594466850105531222;
    uint256 public constant IC15_X =
        3204873038253225528144604783617308735352977773645579131962993288491786919113;
    uint256 public constant IC15_Y =
        14745425993160358322356154296630481898304529731030747018783656243628324226419;
    uint256 public constant IC16_X =
        2879068951326848915522200328492070415748777417172288395311442738020044635979;
    uint256 public constant IC16_Y =
        17887341835821156001190454927774167305958066354938698936431768942797630456717;
    uint256 public constant IC17_X =
        7768371285211514888164725131330013035354946221714266872156548477700204543184;
    uint256 public constant IC17_Y =
        16551033986105221556500022543579939439756273913357846208040756606405408605744;
    uint256 public constant IC18_X =
        19666914214921060704377659641992233840488930645345974474891490563665455654680;
    uint256 public constant IC18_Y =
        16207512430288020792510035103427771346480670497127296426473102819478968362879;
    uint256 public constant IC19_X =
        2544258309340201436779825164740695326857059184907764027574138203558683019201;
    uint256 public constant IC19_Y =
        3430859352287865523986834677544019942649310010788523440603858586109562617924;
    uint256 public constant IC20_X =
        481434627547883087347068523800224705172729936288839811092542178279424982307;
    uint256 public constant IC20_Y =
        18208938037494092978906271323026847613257944612772698727321902259134196182994;
    uint256 public constant IC21_X =
        4540200849532123050821116299952165643082213994606763965746432689924094383596;
    uint256 public constant IC21_Y =
        11743911884330962100199732417189179740736014940110681086334778318969241160881;
    uint256 public constant IC22_X =
        5127893874427286191688206822403241672810166849390088231196067911560301525322;
    uint256 public constant IC22_Y =
        1905507368217522281658080234740884695286385554800754987076456979721755928562;
    uint256 public constant IC23_X =
        15090313415225616725831606708496781837005230426648912422586279746136183713192;
    uint256 public constant IC23_Y =
        7952679477909942062628916302268110391810545876828536820322001136670111686968;
    uint256 public constant IC24_X =
        12910729401870425859453342357044019900511907371271813904295707228204698457661;
    uint256 public constant IC24_Y =
        15576640413681051971038774907200362543952673607154567558784680696686140929528;
    uint256 public constant IC25_X =
        15295986425333023552509354674171472840774507376238772714905006927325070423725;
    uint256 public constant IC25_Y =
        21512942617527186784349379216702428204956258148732095020829078444871377128062;
    uint256 public constant IC26_X =
        6063213620139358089713125506616693185651197551164859996409249869507399308278;
    uint256 public constant IC26_Y =
        8197158941096729635290945373090625063425600763318722634682425547574985654598;
    uint256 public constant IC27_X =
        21167644729111369431653301366469292219619096813996237727254959654116858408396;
    uint256 public constant IC27_Y =
        17726213107039379897004307636803728159663261615318478501568737742346981884746;
    uint256 public constant IC28_X =
        2065121795390698932578476622600175260876194847326511170803551861438790729132;
    uint256 public constant IC28_Y =
        11377439111365828829364320243300536431576318896808100794336670322402844137898;
    uint256 public constant IC29_X =
        8523461856375525773162470887133725962859693614213423524162221868438737133302;
    uint256 public constant IC29_Y =
        5213727753552735097266117822476167382258727291405273129622605202408510801127;
    uint256 public constant IC30_X =
        12680827951545276710778918665081964735147643026741863498892766301280985631491;
    uint256 public constant IC30_Y =
        9971305825900468647159682426979511793744889158757480227189092345473574407016;
    uint256 public constant IC31_X =
        10271419318250641951216771554770740572660950518529152917897504968265701672408;
    uint256 public constant IC31_Y =
        9246245793728919092232666761688380719993004064646942071940839826943497436072;
    uint256 public constant IC32_X =
        9702489188766403102022053644005167130287665475244876490772058772387388446705;
    uint256 public constant IC32_Y =
        9626565426982983094442914660661095024163674705588160463008260881762357567647;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, BASE_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
